/* parserT generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parserT errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parserT (grammar) errors will also provide these members, i.e. parserT errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parserT has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,13],$V2=[1,14],$V3=[1,20],$V4=[1,21],$V5=[1,34],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,33],$Vd=[1,30],$Ve=[1,31],$Vf=[2,5,17,18,24,28,30,31,41,42,44,51,54,55,56,58,62,63,71],$Vg=[43,111],$Vh=[2,135],$Vi=[1,44],$Vj=[1,45],$Vk=[1,61],$Vl=[1,51],$Vm=[1,48],$Vn=[1,49],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,60],$Vw=[1,73],$Vx=[10,27],$Vy=[1,90],$Vz=[1,91],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[1,100],$VP=[1,101],$VQ=[1,102],$VR=[1,103],$VS=[1,104],$VT=[1,105],$VU=[10,27,35,40,45,64,65,77,78,79,80,81,82,83,84,86,87,88,89,90,91,102,105,106,107,108,109],$VV=[10,43],$VW=[2,40],$VX=[1,132],$VY=[27,35,40],$VZ=[10,27,35,40,45,77,78,83,84,86,87,88,89,90,91,102],$V_=[10,27,35,40,45,77,78,79,80,82,83,84,86,87,88,89,90,91,102],$V$=[1,163],$V01=[1,165],$V11=[1,160],$V21=[1,161],$V31=[1,162],$V41=[1,164],$V51=[2,5,17,18,24,28,30,31,41,42,44,51,53,54,55,56,58,62,63,71],$V61=[1,178],$V71=[10,39,43],$V81=[1,185],$V91=[10,27,35,40,45,83,84,86,87,88,89,90,91,102],$Va1=[10,27,35,40,45,83,84,90,91,102],$Vb1=[2,5,17,18,24,25,28,30,31,41,42,44,51,54,55,56,58,62,63,71,78,85,93,94,95,96,97,98,99,101],$Vc1=[10,27,30,35,39,43,59],$Vd1=[1,205],$Ve1=[1,207],$Vf1=[35,40],$Vg1=[39,59],$Vh1=[27,35],$Vi1=[1,232],$Vj1=[1,233],$Vk1=[30,35],$Vl1=[1,251],$Vm1=[1,253],$Vn1=[30,62,63],$Vo1=[1,290],$Vp1=[1,282],$Vq1=[1,283],$Vr1=[1,288],$Vs1=[1,289],$Vt1=[1,291],$Vu1=[2,17,18,24,28,30,41,42,44,51,54,55,56,58,71],$Vv1=[27,35,39,59];
var parserT = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Imprimir":7,"DeclaracionVariable":8,"AsignacionVariable":9,";":10,"IfSt":11,"WhileSt":12,"DoWhileSt":13,"SwitchSt":14,"IncreDecre":15,"DefinicionTypes":16,"BREAK":17,"CONTINUE":18,"DeclaracionArreglos":19,"ForNormal":20,"ForOf":21,"ForIn":22,"Funcion":23,"ID":24,"(":25,"ListaExpr":26,")":27,"RETURN":28,"Expr":29,"}":30,"FUNCTION":31,"ListaParametros":32,"TiposFuncion":33,"StatementFuncion":34,",":35,"ElementoParametro":36,"Tipo":37,"ListaCorh":38,"[":39,"]":40,"CONSOLELOG":41,"LET":42,"=":43,"CONST":44,":":45,"TIPOSTRING":46,"TIPOBOOLEAN":47,"TIPONUMBER":48,"TIPOVOID":49,"AsigIndividual":50,"IF":51,"Statement":52,"ELSE":53,"WHILE":54,"DO":55,"FOR":56,"OpcAsignacion":57,"SWITCH":58,"{":59,"ListaCasos":60,"Caso":61,"CASE":62,"DEFAULT":63,"++":64,"--":65,"ListaID":66,"ListaDeclaraciones":67,"ElementoDeclaracion":68,"ListaValoresTipo":69,"ValorType":70,"TYPE":71,"ListaDefiniciones":72,"DefinicionAtributo":73,"ListaDimensiones":74,"ValoresArreglo":75,"ValorArreglo":76,"+":77,"-":78,"*":79,"/":80,"**":81,"%":82,"||":83,"&&":84,"!":85,">=":86,"<=":87,">":88,"<":89,"==":90,"!=":91,"F":92,"DECIMAL":93,"NUMBER":94,"STRING":95,"STRING2":96,"STRING3":97,"TRUE":98,"FALSE":99,"NuevoAcceso":100,"NULL":101,"?":102,"Acceso":103,"FuncionArreglo":104,"LENGTH":105,"CHARAT":106,"UPPERCASE":107,"LOWERCASE":108,"CONCAT":109,"Accesos":110,".":111,"InstruccionesFuncion":112,"InstruccionFuncion":113,"OF":114,"IN":115,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",17:"BREAK",18:"CONTINUE",24:"ID",25:"(",27:")",28:"RETURN",30:"}",31:"FUNCTION",35:",",39:"[",40:"]",41:"CONSOLELOG",42:"LET",43:"=",44:"CONST",45:":",46:"TIPOSTRING",47:"TIPOBOOLEAN",48:"TIPONUMBER",49:"TIPOVOID",51:"IF",53:"ELSE",54:"WHILE",55:"DO",56:"FOR",58:"SWITCH",59:"{",62:"CASE",63:"DEFAULT",64:"++",65:"--",71:"TYPE",77:"+",78:"-",79:"*",80:"/",81:"**",82:"%",83:"||",84:"&&",85:"!",86:">=",87:"<=",88:">",89:"<",90:"==",91:"!=",93:"DECIMAL",94:"NUMBER",95:"STRING",96:"STRING2",97:"STRING3",98:"TRUE",99:"FALSE",101:"NULL",102:"?",104:"FuncionArreglo",105:"LENGTH",106:"CHARAT",107:"UPPERCASE",108:"LOWERCASE",109:"CONCAT",111:".",114:"OF",115:"IN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,5],[6,4],[6,3],[6,2],[6,2],[6,2],[23,7],[23,6],[32,3],[32,1],[36,2],[36,3],[38,3],[38,2],[33,1],[33,2],[7,5],[8,4],[8,6],[8,6],[37,0],[37,2],[37,2],[37,2],[37,2],[37,2],[9,3],[11,5],[11,7],[11,7],[12,5],[13,7],[20,8],[57,1],[57,1],[14,7],[60,2],[60,1],[61,4],[61,3],[61,4],[61,3],[15,2],[15,2],[52,3],[52,2],[66,3],[66,1],[67,3],[67,1],[68,4],[68,7],[69,3],[69,1],[70,3],[70,5],[16,6],[72,3],[72,1],[73,3],[19,5],[19,5],[19,4],[19,1],[74,3],[74,6],[74,6],[75,3],[75,1],[76,3],[76,3],[26,3],[26,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,2],[29,3],[29,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[92,3],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,4],[92,3],[92,5],[100,1],[100,2],[103,1],[103,2],[103,5],[103,4],[103,4],[103,5],[110,5],[50,3],[50,1],[34,3],[34,2],[112,2],[112,1],[113,1],[113,1],[113,2],[113,1],[113,1],[113,1],[113,1],[113,2],[113,2],[113,2],[113,2],[113,2],[113,1],[113,1],[113,1],[113,5],[113,4],[113,3],[113,2],[113,2],[113,2],[21,8],[21,8],[22,8],[22,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 56: case 138:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3:

        this.$=[$$[$0]];
    
break;
case 4: case 9: case 111:

        this.$=$$[$0];
    
break;
case 5: case 7: case 8: case 16: case 34: case 53: case 54: case 140: case 143: case 144: case 146:

        this.$ = $$[$0];
    
break;
case 6: case 11: case 142: case 147:

        this.$ = $$[$0-1];
    
break;
case 10: case 152:

        this.$ =$$[$0];
    
break;
case 12: case 15: case 17: case 68: case 69: case 70: case 79: case 87:

        
    
break;
case 13: case 149:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 14: case 150:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 18:

                
    
break;
case 19:

        this.$ = $$[$0];
       
    
break;
case 20:

        this.$ = new AsignacionFuncion($$[$0-4], $$[$0-2],null,  _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 21:

        this.$ = new AsignacionFuncion($$[$0-3], [],null,  _$[$0-3].first_line, _$[$0-3].first_column);
        /*
    }
    |ID  '=' '{' ListaValoresTipo '}' ';'
    {
     */   
    
break;
case 22:

        this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 23:

        this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
    /*    
    }
    |AsigIndividual '=' Expr ';'
    {
        
    }
    |AsigIndividual '=' '['']' ';'
    {
        
    */
    
break;
case 24:

        error=new Error_(_$[$0-1].first_line, _$[$0-1].first_column, 'Sintactico','El caracter: " ' + yytext + ' ",  no se esperaba');
        errores.push(error);
    
break;
case 25:

        error=new Error_(_$[$0-1].first_line,_$[$0-1].first_column, 'Sintactico','El caracter: " ' + yytext + ' ",  no se esperaba');
        errores.push(error);
    
break;
case 26:

        this.$ = new FuncionSt($$[$0-1],$$[$0-5],$$[$0-3],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);  
                          //(tipo: Type,id: string, parametros: Array<Parametro>, cuerpo: Instruccion, linea: number, columna: number)
    
break;
case 27:

        this.$ = new FuncionSt($$[$0-1],$$[$0-4],[],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
    
break;
case 28: case 91:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 29: case 57: case 67: case 92: case 139:

        this.$ = [$$[$0]];
    
break;
case 30:

        this.$ = new Parametro($$[$0-1], $$[$0]);
    
break;
case 31:

        this.$ = new Parametro($$[$0-2], new Type(Types.ARRAY));
    
break;
case 35:

        if($$[$0-1].nombreTipo != Types.STRUCT)
        {
            this.$ = new Type(Types.ARRAY, $$[$0-1].nombreTipo);
        }
        else
        {
            this.$ = new Type(Types.ARRAY, $$[$0-1].nombreTipo);
        }
    
break;
case 36:

        this.$ = new Imprimir($$[$0-2], true, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 37:

        console.log($$[$0-1].nombreTipo);
        console.log(Types.STRING);
        if($$[$0-1].nombreTipo == Types.STRING){
            this.$ =  new Declaracion(false, $$[$0-1], [$$[$0-2]], new StringL(Types.STRING, '', _$[$0-3].first_line, _$[$0-3].first_column), _$[$0-3].first_line, _$[$0-3].first_column);
        }else{
            this.$ =  new Declaracion(false, $$[$0-1], [$$[$0-2]], null, _$[$0-3].first_line, _$[$0-3].first_column);
        }
        
    
break;
case 38:

        this.$ =  new Declaracion(false, $$[$0-3], [$$[$0-4]], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 39:

        this.$ =  new Declaracion(true, $$[$0-3], [$$[$0-4]], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 41:

        this.$ = new Type(Types.STRING);
    
break;
case 42:

        this.$ = new Type(Types.BOOLEAN);
    
break;
case 43:

        this.$ = new Type(Types.NUMBER);
    
break;
case 44:

        this.$ = new Type(Types.STRUCT, $$[$0]);
    
break;
case 45:

        this.$ = new Type(Types.VOID);
    
break;
case 46:

        this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 47:

        this.$ = new If($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 48: case 49:

        this.$ = new If($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 50:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 51:

        this.$ = new DoWhile($$[$0-2],$$[$0-5],_$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 52:

        this.$ = new For($$[$0-5], $$[$0-4],$$[$0-2],$$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 55:

        this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 58: case 60:

        this.$ = new Caso($$[$0-2], $$[$0],false, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 59: case 61:

        this.$ = new Caso(null, $$[$0],true, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 62:
   
        var a = new AsignacionId($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column);
        var b = new AccesoId($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column);
        var c = new PrimitivoL(Types.NUMBER, '1', _$[$0-1].first_line, _$[$0-1].first_column);
        var res = new Suma(b,c,_$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new Asignacion(a, res, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 63:

        var a = new AsignacionId($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column);
        var b = new AccesoId($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column);
        var c = new PrimitivoL(Types.NUMBER, '1', _$[$0-1].first_line, _$[$0-1].first_column);
        var res = new Resta(b,c,_$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new Asignacion(a, res, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 64:

        this.$ =  new Statement($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 65:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 66:

        $$[$0-2].push($$[$0-1]);
        this.$ = $$[$0-2];
    
break;
case 71: case 76: case 77: case 78: case 85: case 86: case 88: case 89:


    
break;
case 72: case 73: case 74: case 75: case 81: case 82: case 83: case 100: case 101: case 126: case 148: case 151: case 153: case 161: case 162: case 163: case 164:

    
break;
case 80:
       
    
break;
case 84:
   
    
break;
case 90:
   

    
break;
case 93:

        this.$ = new Suma($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 94:

        this.$ = new Resta($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 95:
 
        this.$ = new Multiplicacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 96:

        this.$ = new Division($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 97:

        this.$ = new Potencia($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 98:

        this.$ = new Residuo($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 99:

        this.$ = new Inverso($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 102:

        this.$ = new Or($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 103:

        this.$ = new And($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 104:
 
        this.$ = new Not($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 105:

        this.$ = new MayorQue(true,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 106:
 
        this.$ = new MenorQue(true,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 107:

        this.$ = new MayorQue(false,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 108:

        this.$ = new MenorQue(false,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 109:

        this.$ = new IgualIgual($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 110:
 
        this.$ = new NoIgual($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 112:
 
        this.$ = $$[$0-1];
    
break;
case 113: case 114:
 
        this.$=new PrimitivoL(Types.NUMBER, $$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 115: case 116: case 117:

        this.$ = new StringL(Types.STRING, $$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 118:

        this.$=new PrimitivoL(Types.BOOLEAN, true, _$[$0].first_line, _$[$0].first_column);
    
break;
case 119:

        this.$=new PrimitivoL(Types.BOOLEAN, false, _$[$0].first_line, _$[$0].first_column);
    
break;
case 120:

       
    
break;
case 121:

        this.$=new PrimitivoL(Types.NULL, -1, _$[$0].first_line, _$[$0].first_column);
    
break;
case 122:

        this.$ = new AsignacionFuncion($$[$0-3], $$[$0-1],null,  _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 123:

        this.$ =  new AsignacionFuncion($$[$0-2], [], null, _$[$0-2]. first_line, _$[$0-2].first_column);
    
break;
case 124:

        this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 125:
/*
        this.$ = $$[$0];
    }
    |Accesos
    {
        this.$ = $$[$0];
    */
break;
case 127:

        this.$ = new AccesoId($$[$0], null, _$[$0].first_line, _$[$0].first_column);
    
break;
case 128:

        this.$ =  new Length($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 129:

        console.log($$[$0-3]);
        this.$ =  new CharAt($$[$0-4],$$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 130:

        this.$ =  new ToUpperCase($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 131:

        this.$ =  new ToLowerCase($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 132:

        this.$ =  new Concat($$[$0-4],$$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 133:

        this.$ =  new Length($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 134:

        this.$ = new AsignacionId($$[$0], $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 135:

        this.$ = new AsignacionId($$[$0], null, _$[$0].first_line, _$[$0].first_column);
    
break;
case 136:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 137:

        this.$ = new Statement(null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 141:

        this.$ = $$[$0];

    
break;
case 145:

        this.$= $$[$0];
    
break;
case 154:

        /*
    }
    |ID  '=' '{' ListaValoresTipo '}' ';'
    {
        */
    
break;
case 155:

        this.$ =  new AsignacionFuncion($$[$0-4], $$[$0-2], null, _$[$0-4]. first_line, _$[$0-4].first_column);
    
break;
case 156:

        this.$ =  new AsignacionFuncion($$[$0-3], [], null, _$[$0-3]. first_line, _$[$0-3].first_column);
    
break;
case 157:
   
        this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 158:

        this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 159:

        error=new Error_(_$[$0-1].first_line, _$[$0-1].first_column, 'Sintactico','El caracter: " ' + yytext + ' ",  no se esperaba(Una instruccion no pertenece a la funcion)');
        errores.push(error);
    
break;
case 160:

        error=new Error_(_$[$0-1].first_line,_$[$0-1].first_column, 'Sintactico','El caracter: " ' + yytext + ' ",  no se esperaba (Una instruccion no pertenece a la funcion)');
        errores.push(error);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:15,20:16,21:17,22:18,23:19,24:$V3,28:$V4,31:$V5,41:$V6,42:$V7,44:$V8,50:26,51:$V9,54:$Va,55:$Vb,56:$Vc,58:$Vd,71:$Ve,74:32},{1:[3]},{2:$V0,5:[1,35],6:36,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:15,20:16,21:17,22:18,23:19,24:$V3,28:$V4,31:$V5,41:$V6,42:$V7,44:$V8,50:26,51:$V9,54:$Va,55:$Vb,56:$Vc,58:$Vd,71:$Ve,74:32},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),{10:[1,37]},o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),{10:[1,38]},{10:[1,39]},{10:[1,40]},{10:[1,41]},{10:[1,42]},o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vg,$Vh,{25:[1,43],64:$Vi,65:$Vj}),{10:[1,47],24:$Vk,25:$Vl,29:46,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{10:[1,63],30:[1,64]},{25:[1,65]},{24:[1,66]},{24:[1,67]},{43:[1,68],111:[1,69]},{25:[1,70]},{25:[1,71]},{52:72,59:$Vw},{25:[1,74]},{24:[1,75]},{10:[2,83],39:[1,77],43:[1,76]},{25:[1,78]},{24:[1,79]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,6]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),{24:$Vk,25:$Vl,26:80,27:[1,81],29:82,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},o($Vx,[2,62]),o($Vx,[2,63]),{10:[1,83],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},o($Vf,[2,23]),{24:$Vk,25:$Vl,29:106,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:107,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},o($VU,[2,111]),{24:$Vk,25:$Vl,29:108,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},o($VU,[2,113]),o($VU,[2,114]),o($VU,[2,115]),o($VU,[2,116]),o($VU,[2,117]),o($VU,[2,118]),o($VU,[2,119]),o($VU,[2,120]),o($VU,[2,121]),o($VU,[2,127],{25:[1,109],104:[1,110]}),o($VU,[2,125]),o($Vf,[2,24]),o($Vf,[2,25]),{24:$Vk,25:$Vl,26:111,29:82,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},o($VV,$VW,{37:112,45:[1,113]}),{37:114,43:$VW,45:[1,115]},{24:$Vk,25:$Vl,29:116,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:[1,117]},{24:$Vk,25:$Vl,29:118,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:119,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{54:[1,120]},{2:$V0,4:121,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:15,20:16,21:17,22:18,23:19,24:$V3,28:$V4,30:[1,122],31:$V5,41:$V6,42:$V7,44:$V8,50:26,51:$V9,54:$Va,55:$Vb,56:$Vc,58:$Vd,71:$Ve,74:32},{24:$Vk,25:$Vl,29:123,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{43:[1,124]},{39:[1,125]},{40:[1,126]},{8:127,42:[1,128],44:[1,129]},{25:[1,130]},{27:[1,131],35:$VX},{10:[1,133]},o($VY,[2,92],{64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($Vf,[2,22]),{24:$Vk,25:$Vl,29:134,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:135,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:136,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:137,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:138,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:139,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},o($VU,[2,100]),o($VU,[2,101]),{24:$Vk,25:$Vl,29:140,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:141,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:142,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:143,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:144,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:145,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:146,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:147,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:148,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},o($VU,[2,128]),{25:[1,149]},{25:[1,150]},{25:[1,151]},{25:[1,152]},o($VZ,[2,99],{64:$Vy,65:$Vz,79:$VC,80:$VD,81:$VE,82:$VF,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($V_,[2,104],{64:$Vy,65:$Vz,81:$VE,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),{27:[1,153],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{24:$Vk,25:$Vl,26:154,27:[1,155],29:82,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},o($VU,[2,126]),{27:[1,156],35:$VX},{10:[1,157],43:[1,158]},{24:$V$,37:159,39:$VW,45:$V01,46:$V11,47:$V21,48:$V31,49:$V41},{43:[1,166]},{24:$V$,37:167,39:$VW,45:$V01,46:$V11,47:$V21,48:$V31,49:$V41},o($Vx,[2,46],{64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($Vg,[2,134]),{27:[1,168],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{27:[1,169],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{25:[1,170]},{2:$V0,6:36,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:15,20:16,21:17,22:18,23:19,24:$V3,28:$V4,30:[1,171],31:$V5,41:$V6,42:$V7,44:$V8,50:26,51:$V9,54:$Va,55:$Vb,56:$Vc,58:$Vd,71:$Ve,74:32},o($V51,[2,65]),{27:[1,172],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{59:[1,173]},{24:$Vk,25:$Vl,26:175,29:82,39:$V61,40:[1,176],75:174,76:177,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},o($V71,[2,84]),{24:$Vk,25:$Vl,29:179,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:[1,180]},{24:[1,181]},{24:$V81,27:[1,183],32:182,36:184},{10:[1,186]},{24:$Vk,25:$Vl,29:187,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},o($Vf,[2,21]),o($VZ,[2,93],{64:$Vy,65:$Vz,79:$VC,80:$VD,81:$VE,82:$VF,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($VZ,[2,94],{64:$Vy,65:$Vz,79:$VC,80:$VD,81:$VE,82:$VF,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($V_,[2,95],{64:$Vy,65:$Vz,81:$VE,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($V_,[2,96],{64:$Vy,65:$Vz,81:$VE,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($V_,[2,97],{64:$Vy,65:$Vz,81:$VE,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($V_,[2,98],{64:$Vy,65:$Vz,81:$VE,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o([10,27,35,40,45,83,102],[2,102],{64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o([10,27,35,40,45,83,84,102],[2,103],{64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($V91,[2,105],{64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($V91,[2,106],{64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($V91,[2,107],{64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($V91,[2,108],{64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($Va1,[2,109],{64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,86:$VI,87:$VJ,88:$VK,89:$VL,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($Va1,[2,110],{64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,86:$VI,87:$VJ,88:$VK,89:$VL,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),{45:[1,188],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{24:$Vk,25:$Vl,29:189,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{27:[1,190]},{27:[1,191]},{24:$Vk,25:$Vl,29:192,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},o($VU,[2,112]),{27:[1,193],35:$VX},o($VU,[2,123]),{10:[1,194]},o($Vb1,[2,37]),{24:$Vk,25:$Vl,29:195,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{39:[1,196]},o($Vc1,[2,41]),o($Vc1,[2,42]),o($Vc1,[2,43]),o($Vc1,[2,44]),o($Vc1,[2,45]),{24:$V$,46:$V11,47:$V21,48:$V31,49:$V41},{24:$Vk,25:$Vl,29:197,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{39:[1,198]},{52:199,59:$Vw},{52:200,59:$Vw},{24:$Vk,25:$Vl,29:201,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},o($V51,[2,64]),{59:[1,202]},{24:$Vd1,72:203,73:204},{35:$Ve1,40:[1,206]},{35:$VX,40:[1,208]},{10:[2,82]},o($Vf1,[2,88]),{24:$Vk,25:$Vl,26:209,29:82,39:$V61,75:210,76:177,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{10:[1,211],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},o($VV,$VW,{37:112,45:$V01,114:[1,212],115:[1,213]}),{37:114,43:$VW,45:$V01,114:[1,214],115:[1,215]},{27:[1,216],35:[1,217]},o($Vg1,$VW,{33:218,37:219,45:$V01}),o($Vh1,[2,29]),o([27,35,39],$VW,{37:220,45:$V01}),o($Vf,[2,20]),o($VY,[2,91],{64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),{24:$Vk,25:$Vl,29:221,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{27:[1,222],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},o($VU,[2,130]),o($VU,[2,131]),{27:[1,223],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},o($VU,[2,122]),o($Vf,[2,36]),{10:[1,224],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{40:[1,225]},{10:[1,226],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{40:[1,227]},o($Vf,[2,47],{53:[1,228]}),o($Vf,[2,50]),{27:[1,229],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{60:230,61:231,62:$Vi1,63:$Vj1},{30:[1,234],35:[1,235]},o($Vk1,[2,78]),{45:[1,236]},{10:[2,80]},{39:$V61,76:237},{10:[2,81]},{35:$VX,40:[1,238]},{35:$Ve1,40:[1,239]},{9:241,15:242,24:[1,243],50:26,57:240},{24:$Vk,25:$Vl,29:244,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:245,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:246,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{24:$Vk,25:$Vl,29:247,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},o($Vg1,$VW,{37:219,33:248,45:$V01}),{24:$V81,36:249},{34:250,59:$Vl1},{38:252,39:$Vm1,59:[2,34]},o($Vh1,[2,30],{38:254,39:$Vm1}),o([10,27,35,40,45,102],[2,124],{64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT}),o($VU,[2,129]),o($VU,[2,132]),o($Vb1,[2,38]),o($V71,[2,85]),o($Vb1,[2,39]),o($V71,[2,86]),{11:256,51:$V9,52:255,59:$Vw},{10:[1,257]},{30:[1,258],61:259,62:$Vi1,63:$Vj1},o($Vn1,[2,57]),{24:$Vk,25:$Vl,29:260,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{45:[1,261]},{10:[2,76]},{24:$Vd1,73:262},o($Vk1,$VW,{37:263,45:$V01}),o($Vf1,[2,87]),o($Vf1,[2,89]),o($Vf1,[2,90]),{27:[1,264]},{27:[2,53]},{27:[2,54]},o($Vg,$Vh,{64:$Vi,65:$Vj}),{27:[1,265],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{27:[1,266],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{27:[1,267],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{27:[1,268],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{34:269,59:$Vl1},o($Vh1,[2,28]),o($Vf,[2,27]),{2:$Vo1,7:273,8:274,9:275,11:276,12:277,13:278,14:279,15:280,16:281,17:$Vp1,18:$Vq1,19:284,20:285,21:286,22:287,24:$Vr1,28:$Vs1,30:[1,271],41:$V6,42:$V7,44:$V8,50:26,51:$V9,54:$Va,55:$Vb,56:$Vc,58:$Vd,71:$Ve,74:32,112:270,113:272},{39:$Vt1,59:[2,35]},{40:[1,292]},o($Vh1,[2,31],{39:$Vt1}),o($Vf,[2,48]),o($Vf,[2,49]),o($Vf,[2,51]),o($Vf,[2,55]),o($Vn1,[2,56]),{45:[1,293],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},{2:$V0,4:295,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:15,20:16,21:17,22:18,23:19,24:$V3,28:$V4,31:$V5,41:$V6,42:$V7,44:$V8,50:26,51:$V9,52:294,54:$Va,55:$Vb,56:$Vc,58:$Vd,59:$Vw,71:$Ve,74:32},o($Vk1,[2,77]),o($Vk1,[2,79]),{52:296,59:$Vw},{52:297,59:$Vw},{52:298,59:$Vw},{52:299,59:$Vw},{52:300,59:$Vw},o($Vf,[2,26]),{2:$Vo1,7:273,8:274,9:275,11:276,12:277,13:278,14:279,15:280,16:281,17:$Vp1,18:$Vq1,19:284,20:285,21:286,22:287,24:$Vr1,28:$Vs1,30:[1,301],41:$V6,42:$V7,44:$V8,50:26,51:$V9,54:$Va,55:$Vb,56:$Vc,58:$Vd,71:$Ve,74:32,113:302},o($Vf,[2,137]),o($Vu1,[2,139]),o($Vu1,[2,140]),o($Vu1,[2,141]),{10:[1,303]},o($Vu1,[2,143]),o($Vu1,[2,144]),o($Vu1,[2,145]),o($Vu1,[2,146]),{10:[1,304]},{10:[1,305]},{10:[1,306]},{10:[1,307]},{10:[1,308]},o($Vu1,[2,152]),o($Vu1,[2,153]),o($Vu1,[2,154]),o($Vg,$Vh,{25:[1,309],64:$Vi,65:$Vj}),{10:[1,311],24:$Vk,25:$Vl,29:310,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{10:[1,312],30:[1,313]},{40:[1,314]},o($Vv1,[2,33]),{2:$V0,4:316,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V1,18:$V2,19:15,20:16,21:17,22:18,23:19,24:$V3,28:$V4,31:$V5,41:$V6,42:$V7,44:$V8,50:26,51:$V9,52:315,54:$Va,55:$Vb,56:$Vc,58:$Vd,59:$Vw,71:$Ve,74:32},o($Vn1,[2,59]),o($Vn1,[2,61],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,19:15,20:16,21:17,22:18,23:19,50:26,74:32,6:36,2:$V0,17:$V1,18:$V2,24:$V3,28:$V4,31:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,56:$Vc,58:$Vd,71:$Ve}),o($Vf,[2,52]),o($Vf,[2,161]),o($Vf,[2,163]),o($Vf,[2,162]),o($Vf,[2,164]),o($Vf,[2,136]),o($Vu1,[2,138]),o($Vu1,[2,142]),o($Vu1,[2,147]),o($Vu1,[2,148]),o($Vu1,[2,149]),o($Vu1,[2,150]),o($Vu1,[2,151]),{24:$Vk,25:$Vl,26:317,27:[1,318],29:82,78:$Vm,85:$Vn,92:50,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:$Vv,103:62},{10:[1,319],64:$Vy,65:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,102:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT},o($Vu1,[2,158]),o($Vu1,[2,159]),o($Vu1,[2,160]),o($Vv1,[2,32]),o($Vn1,[2,58]),o($Vn1,[2,60],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,19:15,20:16,21:17,22:18,23:19,50:26,74:32,6:36,2:$V0,17:$V1,18:$V2,24:$V3,28:$V4,31:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,56:$Vc,58:$Vd,71:$Ve}),{27:[1,320],35:$VX},{10:[1,321]},o($Vu1,[2,157]),{10:[1,322]},o($Vu1,[2,156]),o($Vu1,[2,155])],
defaultActions: {35:[2,1],176:[2,82],206:[2,80],208:[2,81],234:[2,76],241:[2,53],242:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parserT = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { errores } =require('../../interprete/Errores/Errores');
    const { Error_ } =require('../../interprete/Errores/Error');
    const { Suma } = require('../Expresion/Aritmetico/Suma');
    const { Resta } = require('../Expresion/Aritmetico/Resta');
    const { Inverso } = require('../Expresion/Aritmetico/Inverso');
    const { Residuo } = require('../Expresion/Aritmetico/Residuo');
    const { Multiplicacion } = require('../Expresion/Aritmetico/Multiplicacion');
    const { Division } = require('../Expresion/Aritmetico/Division');
    const { Potencia } = require('../Expresion/Aritmetico/Potencia');
    
    const { IgualIgual } = require('../Expresion/Relacional/Igual');
    const { NoIgual } = require('../Expresion/Relacional/NoIgual');
    const { MayorQue } = require('../Expresion/Relacional/Mayor');
    const { MenorQue } = require('../Expresion/Relacional/Menor');
    const { Ternario } = require('../Expresion/Relacional/Ternario');    

    const { And } = require('../Expresion/Logico/And');
    const { Or } = require('../Expresion/Logico/Or');
    const { Not } = require('../Expresion/Logico/Not');
    
    const { AccesoId } = require('../Expresion/Acceso/AccesoId');
    const { AsignacionId } = require('../Expresion/Asignacion/AsignacionId');
    const { AsignacionFuncion } = require('../Expresion/Asignacion/AsignacionFuncion');
    const { Length } = require('../Expresion/Funciones/Length');
    const { CharAt } = require('../Expresion/Funciones/CharAt');
    const { ToUpperCase } = require('../Expresion/Funciones/ToUpperCase');
    const { ToLowerCase } = require('../Expresion/Funciones/ToLowerCase');
    const { Concat } = require('../Expresion/Funciones/Concat');

    const { If } = require('../Instruccion/Control/If');
    const { DoWhile } = require('../Instruccion/Control/DoWhile');
    const { While } = require('../Instruccion/Control/While');
    const { For } = require('../Instruccion/Control/For');
    const { Switch } = require('../Instruccion/Control/Switch');
    const { Caso } = require('../Utils/Caso');
    
    const { Statement } = require('../Instruccion/Control/Statement');

    const { Declaracion } = require('../Instruccion/Variables/Declaracion');
    const { Asignacion } = require('../Instruccion/Variables/Asignacion');
    const { Continue } = require('../Instruccion/Transferencia/Continue');
    const { Break } = require('../Instruccion/Transferencia/Break');
    const { Return } = require('../Instruccion/Transferencia/Return');

    const { Types, Type } = require('../Utils/Type');
    const { PrimitivoL } = require('../Expresion/Literal/Primitivo');
    const { StringL } = require('../Expresion/Literal/String');

    const { Imprimir } = require('../Instruccion/Funciones/Imprimir');
    const { FuncionSt } = require('../Instruccion/Funciones/FuncionSt');

    const { Parametro } = require('../Utils/Parametro');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parserT) {
            this.yy.parserT.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */ 
break;
case 1://console.log("imprime comentario "+yy_.yytext);
break;
case 2://console.log("imprime comentario Multilinea"+yy_.yytext);
break;
case 3:return 93
break;
case 4:return 94
break;
case 5:return 95
break;
case 6:return 96
break;
case 7:return 97
break;
case 8:return 81
break;
case 9:return 79
break;
case 10:return 80
break;
case 11:return 10
break;
case 12:return 35
break;
case 13:return 64
break;
case 14:return 65
break;
case 15:return 78
break;
case 16:return 77
break;
case 17:return '^'
break;
case 18:return 82
break;
case 19:return 87
break;
case 20:return 86
break;
case 21:return 89
break;
case 22:return 88
break;
case 23:return 90
break;
case 24:return 91
break;
case 25:return 83
break;
case 26:return 84
break;
case 27:return 85
break;
case 28:return 102
break;
case 29:return 43
break;
case 30:return 25
break;
case 31:return 27 
break;
case 32:return 59
break;
case 33:return 30
break;
case 34:return 39
break;
case 35:return 40
break;
case 36:return 45
break;
case 37:return 51
break;
case 38:return 53
break;
case 39:return 54
break;
case 40:return 98
break;
case 41:return 99
break;
case 42:return 41
break;
case 43:return 'GRAFICAR_TS'
break;
case 44:return 55
break;
case 45:return 42
break;
case 46:return 44
break;
case 47:return 48
break;
case 48:return 46
break;
case 49:return 47
break;
case 50:return 58
break;
case 51:return 62
break;
case 52:return 63
break;
case 53:return 71
break;
case 54:return 101
break;
case 55:return 17
break;
case 56:return 18
break;
case 57:return 56
break;
case 58:return 114
break;
case 59:return 115
break;
case 60:return 31
break;
case 61:return "TIPOVOID"
break;
case 62:return "RETURN"  
break;
case 63:return 'PUSH'
break;
case 64:return 'POP'
break;
case 65:return 105
break;
case 66:return 107
break;
case 67:return 108
break;
case 68:return 106
break;
case 69:return 109
break;
case 70:return 111
break;
case 71:return 24;
break;
case 72:return 5
break;
case 73: 
    //cuadro_texto.errores_sintacticos_lexicos='Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column+'\n'; 
    error=new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico','El caracter: " ' + yy_.yytext + ' ",  no pertenece al lenguaje');
    errores.push(error);
    //console.log(error);

break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/([^\n])*([\n]|$))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*")))/i,/^(?:(('((\\([\'\"\\bfnrtv]))|([^\'\\]+))*')))/i,/^(?:((`((\\([\'\"\\bfnrtv]))|([^`\\]+))*`)))/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:console\.log\b)/i,/^(?:graficar_ts\b)/i,/^(?:do\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:type\b)/i,/^(?:null\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:for\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:function\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:\.push\b)/i,/^(?:\.pop\b)/i,/^(?:\.length\b)/i,/^(?:\.ToUpperCase\b)/i,/^(?:\.ToLowerCase\b)/i,/^(?:\.charAt\b)/i,/^(?:\.concat\b)/i,/^(?:\.)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parserT.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parserT;parserT.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parserT = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parserT.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}