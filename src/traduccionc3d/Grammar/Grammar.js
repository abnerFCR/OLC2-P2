/* parserT generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parserT errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parserT (grammar) errors will also provide these members, i.e. parserT errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parserT has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,21],$V3=[1,22],$V4=[1,35],$V5=[1,23],$V6=[1,32],$V7=[1,24],$V8=[1,25],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,34],$Vd=[1,30],$Ve=[1,31],$Vf=[5,18,19,25,29,31,41,42,43,45,52,55,56,57,59,62,64,65,73],$Vg=[44,108],$Vh=[2,139],$Vi=[1,46],$Vj=[1,47],$Vk=[1,63],$Vl=[1,53],$Vm=[1,50],$Vn=[1,51],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,62],$Vw=[1,74],$Vx=[10,28],$Vy=[1,92],$Vz=[1,93],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,94],$VH=[1,95],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,102],$VP=[10,28,35,40,46,66,67,79,80,81,82,83,84,85,86,88,89,90,91,92,93,104],$VQ=[1,110],$VR=[1,111],$VS=[1,112],$VT=[10,44],$VU=[2,40],$VV=[1,137],$VW=[28,35,40],$VX=[10,28,35,40,46,79,80,85,86,88,89,90,91,92,93,104],$VY=[10,28,35,40,46,79,80,81,82,84,85,86,88,89,90,91,92,93,104],$VZ=[10,28,35,39,40,46,66,67,79,80,81,82,83,84,85,86,88,89,90,91,92,93,104,108],$V_=[1,170],$V$=[1,172],$V01=[1,167],$V11=[1,168],$V21=[1,169],$V31=[1,171],$V41=[2,5,18,19,25,29,31,41,42,43,45,52,54,55,56,57,59,62,64,65,73],$V51=[1,185],$V61=[10,39,44],$V71=[1,192],$V81=[10,28,35,40,46,85,86,88,89,90,91,92,93,104],$V91=[10,28,35,40,46,85,86,92,93,104],$Va1=[2,5,18,19,25,26,29,31,41,42,43,45,52,55,56,57,59,62,64,65,73,80,87,95,96,97,98,99,100,101,103],$Vb1=[10,28,35,39,44,60,62],$Vc1=[1,212],$Vd1=[1,214],$Ve1=[35,40],$Vf1=[39,60],$Vg1=[28,35],$Vh1=[2,5,18,19,25,29,31,41,42,43,45,52,55,56,57,59,62,64,65,73],$Vi1=[1,240],$Vj1=[1,241],$Vk1=[35,62],$Vl1=[1,259],$Vm1=[1,261],$Vn1=[62,64,65],$Vo1=[1,299],$Vp1=[1,291],$Vq1=[1,292],$Vr1=[1,297],$Vs1=[1,298],$Vt1=[1,300],$Vu1=[2,18,19,25,29,41,42,43,45,52,55,56,57,59,62,73],$Vv1=[28,35,39,60];
var parserT = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Imprimir":7,"DeclaracionVariable":8,"AsignacionVariable":9,";":10,"IfSt":11,"WhileSt":12,"DoWhileSt":13,"SwitchSt":14,"IncreDecre":15,"DefinicionTypes":16,"GraficarTs":17,"BREAK":18,"CONTINUE":19,"DeclaracionArreglos":20,"ForNormal":21,"ForOf":22,"ForIn":23,"Funcion":24,"ID":25,"(":26,"ListaExpr":27,")":28,"RETURN":29,"Expr":30,"FUNCTION":31,"ListaParametros":32,"TiposFuncion":33,"StatementFuncion":34,",":35,"ElementoParametro":36,"Tipo":37,"ListaCorh":38,"[":39,"]":40,"CONSOLELOG":41,"GRAFICAR_TS":42,"LET":43,"=":44,"CONST":45,":":46,"TIPOSTRING":47,"TIPOBOOLEAN":48,"TIPONUMBER":49,"TIPOVOID":50,"AsigIndividual":51,"IF":52,"Statement":53,"ELSE":54,"WHILE":55,"DO":56,"FOR":57,"OpcAsignacion":58,"SWITCH":59,"{":60,"ListaCasos":61,"}":62,"Caso":63,"CASE":64,"DEFAULT":65,"++":66,"--":67,"ListaID":68,"ListaDeclaraciones":69,"ElementoDeclaracion":70,"ListaValoresTipo":71,"ValorType":72,"TYPE":73,"ListaDefiniciones":74,"DefinicionAtributo":75,"ListaDimensiones":76,"ValoresArreglo":77,"ValorArreglo":78,"+":79,"-":80,"*":81,"/":82,"**":83,"%":84,"||":85,"&&":86,"!":87,">=":88,"<=":89,">":90,"<":91,"==":92,"!=":93,"F":94,"DECIMAL":95,"NUMBER":96,"STRING":97,"STRING2":98,"STRING3":99,"TRUE":100,"FALSE":101,"NuevoAcceso":102,"NULL":103,"?":104,"Accesos":105,"Acceso":106,"FuncionArreglo":107,".":108,"POP":109,"PUSH":110,"LENGTH":111,"InstruccionesFuncion":112,"InstruccionFuncion":113,"OF":114,"IN":115,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",18:"BREAK",19:"CONTINUE",25:"ID",26:"(",28:")",29:"RETURN",31:"FUNCTION",35:",",39:"[",40:"]",41:"CONSOLELOG",42:"GRAFICAR_TS",43:"LET",44:"=",45:"CONST",46:":",47:"TIPOSTRING",48:"TIPOBOOLEAN",49:"TIPONUMBER",50:"TIPOVOID",52:"IF",54:"ELSE",55:"WHILE",56:"DO",57:"FOR",59:"SWITCH",60:"{",62:"}",64:"CASE",65:"DEFAULT",66:"++",67:"--",73:"TYPE",79:"+",80:"-",81:"*",82:"/",83:"**",84:"%",85:"||",86:"&&",87:"!",88:">=",89:"<=",90:">",91:"<",92:"==",93:"!=",95:"DECIMAL",96:"NUMBER",97:"STRING",98:"STRING2",99:"STRING3",100:"TRUE",101:"FALSE",103:"NULL",104:"?",108:".",109:"POP",110:"PUSH",111:"LENGTH",114:"OF",115:"IN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,5],[6,4],[6,3],[6,2],[24,7],[24,6],[32,3],[32,1],[36,2],[36,3],[38,3],[38,2],[33,1],[33,2],[7,5],[17,3],[8,4],[8,6],[8,6],[37,0],[37,2],[37,2],[37,2],[37,2],[37,2],[9,3],[11,5],[11,7],[11,7],[12,5],[13,7],[21,8],[58,1],[58,1],[14,7],[61,2],[61,1],[63,4],[63,3],[63,4],[63,3],[15,2],[15,2],[53,3],[53,2],[68,3],[68,1],[69,3],[69,1],[70,4],[70,7],[71,3],[71,1],[72,3],[72,5],[16,6],[74,3],[74,1],[75,3],[20,5],[20,5],[20,4],[20,1],[76,3],[76,6],[76,6],[77,3],[77,1],[78,3],[78,3],[27,3],[27,1],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[30,2],[30,3],[30,3],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[94,3],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,4],[94,3],[94,5],[102,1],[102,1],[102,2],[106,1],[105,3],[105,4],[105,5],[105,3],[105,5],[105,4],[107,3],[107,4],[107,1],[51,3],[51,1],[34,3],[34,2],[112,2],[112,1],[113,1],[113,1],[113,2],[113,1],[113,1],[113,1],[113,1],[113,2],[113,2],[113,2],[113,2],[113,2],[113,2],[113,1],[113,1],[113,1],[113,5],[113,4],[113,3],[113,2],[113,2],[113,2],[22,8],[22,8],[23,8],[23,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 142:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3:

        this.$=[$$[$0]];
    
break;
case 4: case 111:

        this.$=$$[$0];
    
break;
case 5: case 7: case 8: case 17: case 33: case 53: case 54: case 144: case 147: case 148:

        this.$ = $$[$0];
    
break;
case 6: case 11: case 146: case 151:

        this.$ = $$[$0-1];
    
break;
case 9: case 10: case 12: case 13: case 16: case 18: case 36: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 68: case 69: case 70: case 79: case 87:

        
    
break;
case 14: case 154:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 15: case 155:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 19:

                
    
break;
case 20:

        this.$ = $$[$0];
       
    
break;
case 21:

        this.$ = new AsignacionFuncion($$[$0-4], $$[$0-2],null,  _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 22:

        this.$ = new AsignacionFuncion($$[$0-3], [],null,  _$[$0-3].first_line, _$[$0-3].first_column);
        /*
    }
    |ID  '=' '{' ListaValoresTipo '}' ';'
    {
     */   
    
break;
case 23:

        this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 24:

        this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
    /*    
    }
    |AsigIndividual '=' Expr ';'
    {
        
    }
    |AsigIndividual '=' '['']' ';'
    {
        
    /*
    |error ';'
    {
        error=new Error_(_$[$0-1].first_line, _$[$0-1].first_column, 'Sintactico','El caracter: " ' + yytext + ' ",  no se esperaba');
        errores.push(error);
    }
    |error '}'
    {
        error=new Error_(_$[$0-1].first_line,_$[$0-1].first_column, 'Sintactico','El caracter: " ' + yytext + ' ",  no se esperaba');
        errores.push(error);
    }
    */
    
break;
case 25:

        this.$ = new FuncionSt($$[$0-1],$$[$0-5],$$[$0-3],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);  
                          //(tipo: Type,id: string, parametros: Array<Parametro>, cuerpo: Instruccion, linea: number, columna: number)
    
break;
case 26:

        this.$ = new FuncionSt($$[$0-1],$$[$0-4],[],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
    
break;
case 27: case 91:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 28: case 67: case 92: case 143:

        this.$ = [$$[$0]];
    
break;
case 29:

        this.$ = new Parametro($$[$0-1], $$[$0]);
    
break;
case 30:

        this.$ = new Parametro($$[$0-2], new Type(Types.ARRAY));
    
break;
case 34:

        if($$[$0-1].nombreTipo != Types.STRUCT)
        {
            this.$ = new Type(Types.ARRAY, $$[$0-1].nombreTipo);
        }
        else
        {
            this.$ = new Type(Types.ARRAY, $$[$0-1].nombreTipo);
        }
    
break;
case 35:

        this.$ = new Imprimir($$[$0-2], true, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 37:

        this.$ =  new Declaracion(false, $$[$0-1], [$$[$0-2]], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 38: case 39:

        this.$ =  new Declaracion(false, $$[$0-3], [$$[$0-4]], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 41:

        this.$ = new Type(Types.STRING);
    
break;
case 42:

        this.$ = new Type(Types.BOOLEAN);
    
break;
case 43:

        this.$ = new Type(Types.NUMBER);
    
break;
case 44:

        this.$ = new Type(Types.STRUCT, $$[$0]);
    
break;
case 45:

        this.$ = new Type(Types.VOID);
    
break;
case 46:

        this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 47:

        this.$ = new If($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 48: case 49:

        this.$ = new If($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 50:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 51:

        this.$ = new DoWhile($$[$0-2],$$[$0-5],_$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 52:

        this.$ = new For($$[$0-5], $$[$0-4],$$[$0-2],$$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 62:
   
        var a = new AsignacionId($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column);
        var b = new AccesoId($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column);
        var c = new PrimitivoL(Types.NUMBER, '1', _$[$0-1].first_line, _$[$0-1].first_column);
        var res = new Suma(b,c,_$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new Asignacion(a, res, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 63:

        var a = new AsignacionId($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column);
        var b = new AccesoId($$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column);
        var c = new PrimitivoL(Types.NUMBER, '1', _$[$0-1].first_line, _$[$0-1].first_column);
        var res = new Resta(b,c,_$[$0-1].first_line, _$[$0-1].first_column);
        this.$ = new Asignacion(a, res, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 64:

        this.$ =  new Statement($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 65:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 66:

        $$[$0-2].push($$[$0-1]);
        this.$ = $$[$0-2];
    
break;
case 71: case 76: case 77: case 78: case 85: case 86: case 88: case 89:


    
break;
case 72: case 73: case 74: case 75: case 81: case 82: case 83: case 100: case 101: case 125: case 126: case 127: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 150: case 152: case 153: case 156: case 158: case 166: case 167: case 168: case 169:

    
break;
case 80:
       
    
break;
case 84:
   
    
break;
case 90:
   

    
break;
case 93:

        this.$ = new Suma($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 94:

        this.$ = new Resta($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 95:
 
        this.$ = new Multiplicacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 96:

        this.$ = new Division($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 97:

        this.$ = new Potencia($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 98:

        this.$ = new Residuo($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 99:

        this.$ = new Inverso($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 102:

        this.$ = new Or($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 103:

        this.$ = new And($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column); 
    
break;
case 104:
 
        this.$ = new Not($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 105:

        this.$ = new MayorQue(true,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 106:
 
        this.$ = new MenorQue(true,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 107:

        this.$ = new MayorQue(false,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 108:

        this.$ = new MenorQue(false,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 109:

        this.$ = new IgualIgual($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 110:
 
        this.$ = new NoIgual($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 112:
 
        this.$ = $$[$0-1];
    
break;
case 113: case 114:
 
        this.$=new PrimitivoL(Types.NUMBER, $$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 115: case 116: case 117:

        this.$ = new StringL(Types.STRING, $$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 118:

        this.$=new PrimitivoL(Types.BOOLEAN, true, _$[$0].first_line, _$[$0].first_column);
    
break;
case 119:

        this.$=new PrimitivoL(Types.BOOLEAN, false, _$[$0].first_line, _$[$0].first_column);
    
break;
case 120:

       
    
break;
case 121:

        this.$=new PrimitivoL(Types.NULL, -1, _$[$0].first_line, _$[$0].first_column);
    
break;
case 122:

        this.$ = new AsignacionFuncion($$[$0-3], $$[$0-1],null,  _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 123:

        this.$ =  new AsignacionFuncion($$[$0-2], [], null, _$[$0-2]. first_line, _$[$0-2].first_column);
    
break;
case 124:

        this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 128:

        this.$ = new AccesoId($$[$0], null, _$[$0].first_line, _$[$0].first_column);
    
break;
case 138:

        this.$ = new AsignacionId($$[$0], $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 139:

        this.$ = new AsignacionId($$[$0], null, _$[$0].first_line, _$[$0].first_column);
    
break;
case 140:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 141:

        this.$ = new Statement(null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 145:

        this.$ = $$[$0];

    
break;
case 149:

        this.$= $$[$0];
    
break;
case 157:

        this.$ =$$[$0];
    
break;
case 159:

        /*
    }
    |ID  '=' '{' ListaValoresTipo '}' ';'
    {
        */
    
break;
case 160:

        this.$ =  new AsignacionFuncion($$[$0-4], $$[$0-2], null, _$[$0-4]. first_line, _$[$0-4].first_column);
    
break;
case 161:

        this.$ =  new AsignacionFuncion($$[$0-3], [], null, _$[$0-3]. first_line, _$[$0-3].first_column);
    
break;
case 162:
   
        this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 163:

        this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 164:

        error=new Error_(_$[$0-1].first_line, _$[$0-1].first_column, 'Sintactico','El caracter: " ' + yytext + ' ",  no se esperaba(Una instruccion no pertenece a la funcion)');
        errores.push(error);
    
break;
case 165:

        error=new Error_(_$[$0-1].first_line,_$[$0-1].first_column, 'Sintactico','El caracter: " ' + yytext + ' ",  no se esperaba (Una instruccion no pertenece a la funcion)');
        errores.push(error);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:$V1,20:16,21:17,22:18,23:19,24:20,25:$V2,29:$V3,31:$V4,41:$V5,42:$V6,43:$V7,45:$V8,51:26,52:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,73:$Ve,76:33},{1:[3]},{5:[1,36],6:37,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:$V1,20:16,21:17,22:18,23:19,24:20,25:$V2,29:$V3,31:$V4,41:$V5,42:$V6,43:$V7,45:$V8,51:26,52:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,73:$Ve,76:33},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),{10:[1,38]},o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),{10:[1,39]},{10:[1,40]},{10:[1,41]},{10:[1,42]},{10:[1,43]},{10:[1,44]},o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vg,$Vh,{26:[1,45],66:$Vi,67:$Vj}),{10:[1,49],25:$Vk,26:$Vl,30:48,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{26:[1,66]},{25:[1,67]},{25:[1,68]},{44:[1,69],108:[1,70]},{26:[1,71]},{26:[1,72]},{53:73,60:$Vw},{26:[1,75]},{25:[1,76]},{26:[1,77]},{10:[2,83],39:[1,79],44:[1,78]},{26:[1,80]},{25:[1,81]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,6]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),{25:$Vk,26:$Vl,27:82,28:[1,83],30:84,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($Vx,[2,62]),o($Vx,[2,63]),{10:[1,85],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},o($Vf,[2,24]),{25:$Vk,26:$Vl,30:103,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:104,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($VP,[2,111]),{25:$Vk,26:$Vl,30:105,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($VP,[2,113]),o($VP,[2,114]),o($VP,[2,115]),o($VP,[2,116]),o($VP,[2,117]),o($VP,[2,118]),o($VP,[2,119]),o($VP,[2,120]),o($VP,[2,121]),o($VP,[2,128],{107:107,26:[1,106],39:[1,109],108:[1,108],109:$VQ,110:$VR,111:$VS}),o($VP,[2,125],{39:[1,114],108:[1,113]}),o($VP,[2,126]),{25:$Vk,26:$Vl,27:115,30:84,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($VT,$VU,{37:116,46:[1,117]}),{37:118,44:$VU,46:[1,119]},{25:$Vk,26:$Vl,30:120,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:[1,121]},{25:$Vk,26:$Vl,30:122,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:123,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{55:[1,124]},{4:125,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:$V1,20:16,21:17,22:18,23:19,24:20,25:$V2,29:$V3,31:$V4,41:$V5,42:$V6,43:$V7,45:$V8,51:26,52:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,62:[1,126],73:$Ve,76:33},{25:$Vk,26:$Vl,30:127,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{44:[1,128]},{28:[1,129]},{39:[1,130]},{40:[1,131]},{8:132,43:[1,133],45:[1,134]},{26:[1,135]},{28:[1,136],35:$VV},{10:[1,138]},o($VW,[2,92],{66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO}),o($Vf,[2,23]),{25:$Vk,26:$Vl,30:139,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:140,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:141,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:142,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:143,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:144,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($VP,[2,100]),o($VP,[2,101]),{25:$Vk,26:$Vl,30:145,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:146,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:147,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:148,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:149,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:150,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:151,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:152,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:153,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($VX,[2,99],{66:$Vy,67:$Vz,81:$VC,82:$VD,83:$VE,84:$VF}),o($VY,[2,104],{66:$Vy,67:$Vz,83:$VE}),{28:[1,154],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{25:$Vk,26:$Vl,27:155,28:[1,156],30:84,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($VP,[2,127]),{25:[1,157]},{25:$Vk,26:$Vl,30:158,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{26:[1,159]},{26:[1,160]},o($VZ,[2,137]),{25:[1,161]},{25:$Vk,26:$Vl,30:162,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{28:[1,163],35:$VV},{10:[1,164],44:[1,165]},{25:$V_,37:166,39:$VU,46:$V$,47:$V01,48:$V11,49:$V21,50:$V31},{44:[1,173]},{25:$V_,37:174,39:$VU,46:$V$,47:$V01,48:$V11,49:$V21,50:$V31},o($Vx,[2,46],{66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO}),o($Vg,[2,138]),{28:[1,175],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{28:[1,176],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{26:[1,177]},{6:37,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:$V1,20:16,21:17,22:18,23:19,24:20,25:$V2,29:$V3,31:$V4,41:$V5,42:$V6,43:$V7,45:$V8,51:26,52:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,62:[1,178],73:$Ve,76:33},o($V41,[2,65]),{28:[1,179],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{60:[1,180]},{10:[2,36]},{25:$Vk,26:$Vl,27:182,30:84,39:$V51,40:[1,183],77:181,78:184,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($V61,[2,84]),{25:$Vk,26:$Vl,30:186,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:[1,187]},{25:[1,188]},{25:$V71,28:[1,190],32:189,36:191},{10:[1,193]},{25:$Vk,26:$Vl,30:194,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($Vf,[2,22]),o($VX,[2,93],{66:$Vy,67:$Vz,81:$VC,82:$VD,83:$VE,84:$VF}),o($VX,[2,94],{66:$Vy,67:$Vz,81:$VC,82:$VD,83:$VE,84:$VF}),o($VY,[2,95],{66:$Vy,67:$Vz,83:$VE}),o($VY,[2,96],{66:$Vy,67:$Vz,83:$VE}),o($VY,[2,97],{66:$Vy,67:$Vz,83:$VE}),o($VY,[2,98],{66:$Vy,67:$Vz,83:$VE}),o([10,28,35,40,46,85,104],[2,102],{66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN}),o([10,28,35,40,46,85,86,104],[2,103],{66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN}),o($V81,[2,105],{66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF}),o($V81,[2,106],{66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF}),o($V81,[2,107],{66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF}),o($V81,[2,108],{66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF}),o($V91,[2,109],{66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,88:$VI,89:$VJ,90:$VK,91:$VL}),o($V91,[2,110],{66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,88:$VI,89:$VJ,90:$VK,91:$VL}),{46:[1,195],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},o($VP,[2,112]),{28:[1,196],35:$VV},o($VP,[2,123]),o($VZ,[2,132]),{40:[1,197],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{28:[1,198]},{25:$Vk,26:$Vl,30:199,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($VZ,[2,129]),{40:[1,200],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{10:[1,201]},o($Va1,[2,37]),{25:$Vk,26:$Vl,30:202,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{39:[1,203]},o($Vb1,[2,41]),o($Vb1,[2,42]),o($Vb1,[2,43]),o($Vb1,[2,44]),o($Vb1,[2,45]),{25:$V_,47:$V01,48:$V11,49:$V21,50:$V31},{25:$Vk,26:$Vl,30:204,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{39:[1,205]},{53:206,60:$Vw},{53:207,60:$Vw},{25:$Vk,26:$Vl,30:208,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($V41,[2,64]),{60:[1,209]},{25:$Vc1,74:210,75:211},{35:$Vd1,40:[1,213]},{35:$VV,40:[1,215]},{10:[2,82]},o($Ve1,[2,88]),{25:$Vk,26:$Vl,27:216,30:84,39:$V51,77:217,78:184,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{10:[1,218],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},o($VT,$VU,{37:116,46:$V$,114:[1,219],115:[1,220]}),{37:118,44:$VU,46:$V$,114:[1,221],115:[1,222]},{28:[1,223],35:[1,224]},o($Vf1,$VU,{33:225,37:226,46:$V$}),o($Vg1,[2,28]),o([28,35,39],$VU,{37:227,46:$V$}),o($Vf,[2,21]),o($VW,[2,91],{66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO}),{25:$Vk,26:$Vl,30:228,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($VP,[2,122]),o($VZ,[2,134],{107:229,109:$VQ,110:$VR,111:$VS}),o($VZ,[2,135]),{28:[1,230],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},o($VZ,[2,130],{107:231,109:$VQ,110:$VR,111:$VS}),o($Vh1,[2,35]),{10:[1,232],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{40:[1,233]},{10:[1,234],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{40:[1,235]},o($Vh1,[2,47],{54:[1,236]}),o($Vh1,[2,50]),{28:[1,237],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{61:238,63:239,64:$Vi1,65:$Vj1},{35:[1,243],62:[1,242]},o($Vk1,[2,78]),{46:[1,244]},{10:[2,80]},{39:$V51,78:245},{10:[2,81]},{35:$VV,40:[1,246]},{35:$Vd1,40:[1,247]},{9:249,15:250,25:[1,251],51:26,58:248},{25:$Vk,26:$Vl,30:252,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:253,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:254,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{25:$Vk,26:$Vl,30:255,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},o($Vf1,$VU,{37:226,33:256,46:$V$}),{25:$V71,36:257},{34:258,60:$Vl1},{38:260,39:$Vm1,60:[2,33]},o($Vg1,[2,29],{38:262,39:$Vm1}),o([10,28,35,40,46,104],[2,124],{66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN}),o($VZ,[2,133]),o($VZ,[2,136]),o($VZ,[2,131]),o($Va1,[2,38]),o($V61,[2,85]),o($Va1,[2,39]),o($V61,[2,86]),{11:264,52:$V9,53:263,60:$Vw},{10:[1,265]},{62:[1,266],63:267,64:$Vi1,65:$Vj1},o($Vn1,[2,57]),{25:$Vk,26:$Vl,30:268,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{46:[1,269]},{10:[2,76]},{25:$Vc1,75:270},o($Vk1,$VU,{37:271,46:$V$}),o($Ve1,[2,87]),o($Ve1,[2,89]),o($Ve1,[2,90]),{28:[1,272]},{28:[2,53]},{28:[2,54]},o($Vg,$Vh,{66:$Vi,67:$Vj}),{28:[1,273],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{28:[1,274],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{28:[1,275],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{28:[1,276],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{34:277,60:$Vl1},o($Vg1,[2,27]),o($Vf,[2,26]),{2:$Vo1,7:281,8:282,9:283,11:284,12:285,13:286,14:287,15:288,16:289,17:290,18:$Vp1,19:$Vq1,20:293,21:294,22:295,23:296,25:$Vr1,29:$Vs1,41:$V5,42:$V6,43:$V7,45:$V8,51:26,52:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,62:[1,279],73:$Ve,76:33,112:278,113:280},{39:$Vt1,60:[2,34]},{40:[1,301]},o($Vg1,[2,30],{39:$Vt1}),o($Vh1,[2,48]),o($Vh1,[2,49]),o($Vh1,[2,51]),o($Vh1,[2,55]),o($Vn1,[2,56]),{46:[1,302],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},{4:304,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:$V1,20:16,21:17,22:18,23:19,24:20,25:$V2,29:$V3,31:$V4,41:$V5,42:$V6,43:$V7,45:$V8,51:26,52:$V9,53:303,55:$Va,56:$Vb,57:$Vc,59:$Vd,60:$Vw,73:$Ve,76:33},o($Vk1,[2,77]),o($Vk1,[2,79]),{53:305,60:$Vw},{53:306,60:$Vw},{53:307,60:$Vw},{53:308,60:$Vw},{53:309,60:$Vw},o($Vf,[2,25]),{2:$Vo1,7:281,8:282,9:283,11:284,12:285,13:286,14:287,15:288,16:289,17:290,18:$Vp1,19:$Vq1,20:293,21:294,22:295,23:296,25:$Vr1,29:$Vs1,41:$V5,42:$V6,43:$V7,45:$V8,51:26,52:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,62:[1,310],73:$Ve,76:33,113:311},o($Vf,[2,141]),o($Vu1,[2,143]),o($Vu1,[2,144]),o($Vu1,[2,145]),{10:[1,312]},o($Vu1,[2,147]),o($Vu1,[2,148]),o($Vu1,[2,149]),o($Vu1,[2,150]),{10:[1,313]},{10:[1,314]},{10:[1,315]},{10:[1,316]},{10:[1,317]},{10:[1,318]},o($Vu1,[2,157]),o($Vu1,[2,158]),o($Vu1,[2,159]),o($Vg,$Vh,{26:[1,319],66:$Vi,67:$Vj}),{10:[1,321],25:$Vk,26:$Vl,30:320,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{10:[1,322],62:[1,323]},{40:[1,324]},o($Vv1,[2,32]),{4:326,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:$V1,20:16,21:17,22:18,23:19,24:20,25:$V2,29:$V3,31:$V4,41:$V5,42:$V6,43:$V7,45:$V8,51:26,52:$V9,53:325,55:$Va,56:$Vb,57:$Vc,59:$Vd,60:$Vw,73:$Ve,76:33},o($Vn1,[2,59]),o($Vn1,[2,61],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:16,21:17,22:18,23:19,24:20,51:26,76:33,6:37,18:$V0,19:$V1,25:$V2,29:$V3,31:$V4,41:$V5,42:$V6,43:$V7,45:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,73:$Ve}),o($Vh1,[2,52]),o($Vh1,[2,166]),o($Vh1,[2,168]),o($Vh1,[2,167]),o($Vh1,[2,169]),o($Vf,[2,140]),o($Vu1,[2,142]),o($Vu1,[2,146]),o($Vu1,[2,151]),o($Vu1,[2,152]),o($Vu1,[2,153]),o($Vu1,[2,154]),o($Vu1,[2,155]),o($Vu1,[2,156]),{25:$Vk,26:$Vl,27:327,28:[1,328],30:84,80:$Vm,87:$Vn,94:52,95:$Vo,96:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:61,103:$Vv,105:64,106:65},{10:[1,329],66:$Vy,67:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,104:$VO},o($Vu1,[2,163]),o($Vu1,[2,164]),o($Vu1,[2,165]),o($Vv1,[2,31]),o($Vn1,[2,58]),o($Vn1,[2,60],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:16,21:17,22:18,23:19,24:20,51:26,76:33,6:37,18:$V0,19:$V1,25:$V2,29:$V3,31:$V4,41:$V5,42:$V6,43:$V7,45:$V8,52:$V9,55:$Va,56:$Vb,57:$Vc,59:$Vd,73:$Ve}),{28:[1,330],35:$VV},{10:[1,331]},o($Vu1,[2,162]),{10:[1,332]},o($Vu1,[2,161]),o($Vu1,[2,160])],
defaultActions: {36:[2,1],129:[2,36],183:[2,82],213:[2,80],215:[2,81],242:[2,76],249:[2,53],250:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parserT = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { errores } =require('../../interprete/Errores/Errores');
    const { Error_ } =require('../../interprete/Errores/Error');
    const { Suma } = require('../Expresion/Aritmetico/Suma');
    const { Resta } = require('../Expresion/Aritmetico/Resta');
    const { Inverso } = require('../Expresion/Aritmetico/Inverso');
    const { Residuo } = require('../Expresion/Aritmetico/Residuo');
    const { Multiplicacion } = require('../Expresion/Aritmetico/Multiplicacion');
    const { Division } = require('../Expresion/Aritmetico/Division');
    const { Potencia } = require('../Expresion/Aritmetico/Potencia');
    
    const { IgualIgual } = require('../Expresion/Relacional/Igual');
    const { NoIgual } = require('../Expresion/Relacional/NoIgual');
    const { MayorQue } = require('../Expresion/Relacional/Mayor');
    const { MenorQue } = require('../Expresion/Relacional/Menor');
    const { Ternario } = require('../Expresion/Relacional/Ternario');    

    const { And } = require('../Expresion/Logico/And');
    const { Or } = require('../Expresion/Logico/Or');
    const { Not } = require('../Expresion/Logico/Not');
    
    const { AccesoId } = require('../Expresion/Acceso/AccesoId');
    const { AsignacionId } = require('../Expresion/Asignacion/AsignacionId');
    const { AsignacionFuncion } = require('../Expresion/Asignacion/AsignacionFuncion');


    const { If } = require('../Instruccion/Control/If');
    const { DoWhile } = require('../Instruccion/Control/DoWhile');
    const { While } = require('../Instruccion/Control/While');
    const { For } = require('../Instruccion/Control/For');
    const { Statement } = require('../Instruccion/Control/Statement');

    const { Declaracion } = require('../Instruccion/Variables/Declaracion');
    const { Asignacion } = require('../Instruccion/Variables/Asignacion');
    const { Continue } = require('../Instruccion/Transferencia/Continue');
    const { Break } = require('../Instruccion/Transferencia/Break');
    const { Return } = require('../Instruccion/Transferencia/Return');

    const { Types, Type } = require('../Utils/Type');
    const { PrimitivoL } = require('../Expresion/Literal/Primitivo');
    const { StringL } = require('../Expresion/Literal/String');

    const { Imprimir } = require('../Instruccion/Funciones/Imprimir');
    const { FuncionSt } = require('../Instruccion/Funciones/FuncionSt');

    const { Parametro } = require('../Utils/Parametro');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parserT) {
            this.yy.parserT.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */ 
break;
case 1://console.log("imprime comentario "+yy_.yytext);
break;
case 2://console.log("imprime comentario Multilinea"+yy_.yytext);
break;
case 3:return 95
break;
case 4:return 96
break;
case 5:return 97
break;
case 6:return 98
break;
case 7:return 99
break;
case 8:return 83
break;
case 9:return 81
break;
case 10:return 82
break;
case 11:return 10
break;
case 12:return 35
break;
case 13:return 66
break;
case 14:return 67
break;
case 15:return 80
break;
case 16:return 79
break;
case 17:return '^'
break;
case 18:return 84
break;
case 19:return 89
break;
case 20:return 88
break;
case 21:return 91
break;
case 22:return 90
break;
case 23:return 92
break;
case 24:return 93
break;
case 25:return 85
break;
case 26:return 86
break;
case 27:return 87
break;
case 28:return 104
break;
case 29:return 44
break;
case 30:return 26
break;
case 31:return 28 
break;
case 32:return 60
break;
case 33:return 62
break;
case 34:return 39
break;
case 35:return 40
break;
case 36:return 46
break;
case 37:return 52
break;
case 38:return 54
break;
case 39:return 55
break;
case 40:return 100
break;
case 41:return 101
break;
case 42:return 41
break;
case 43:return 42
break;
case 44:return 56
break;
case 45:return 43
break;
case 46:return 45
break;
case 47:return 49
break;
case 48:return 47
break;
case 49:return 48
break;
case 50:return 59
break;
case 51:return 64
break;
case 52:return 65
break;
case 53:return 73
break;
case 54:return 103
break;
case 55:return 18
break;
case 56:return 19
break;
case 57:return 57
break;
case 58:return 114
break;
case 59:return 115
break;
case 60:return 31
break;
case 61:return "TIPOVOID"
break;
case 62:return "RETURN"  
break;
case 63:return 110
break;
case 64:return 109
break;
case 65:return 111
break;
case 66:return 108
break;
case 67:return 25;
break;
case 68:return 5
break;
case 69: 
    //cuadro_texto.errores_sintacticos_lexicos='Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column+'\n'; 
    error=new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico','El caracter: " ' + yy_.yytext + ' ",  no pertenece al lenguaje');
    errores.push(error);
    //console.log(error);

break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/([^\n])*([\n]|$))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*")))/i,/^(?:(('((\\([\'\"\\bfnrtv]))|([^\'\\]+))*')))/i,/^(?:((`((\\([\'\"\\bfnrtv]))|([^`\\]+))*`)))/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:console\.log\b)/i,/^(?:graficar_ts\b)/i,/^(?:do\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:type\b)/i,/^(?:null\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:for\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:function\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:\.push\b)/i,/^(?:\.pop\b)/i,/^(?:\.length\b)/i,/^(?:\.)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parserT.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parserT;parserT.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parserT = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parserT.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}