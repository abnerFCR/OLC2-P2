/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,14],$V2=[1,15],$V3=[1,21],$V4=[1,22],$V5=[1,36],$V6=[1,25],$V7=[1,33],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,35],$Ve=[1,31],$Vf=[1,32],$Vg=[2,5,18,19,25,32,33,38,51,52,53,55,56,60,61,62,64,67,68,75],$Vh=[1,50],$Vi=[1,48],$Vj=[1,49],$Vk=[1,51],$Vl=[1,67],$Vm=[1,57],$Vn=[1,54],$Vo=[1,55],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,63],$Vv=[1,64],$Vw=[1,66],$Vx=[1,71],$Vy=[1,72],$Vz=[1,84],$VA=[10,28],$VB=[1,106],$VC=[1,107],$VD=[1,100],$VE=[1,101],$VF=[1,102],$VG=[1,103],$VH=[1,104],$VI=[1,105],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[1,114],$VQ=[1,115],$VR=[1,116],$VS=[10,28,32,37,40,45,69,70,81,82,83,84,85,86,87,88,90,91,92,93,94,95,106],$VT=[1,124],$VU=[1,125],$VV=[1,126],$VW=[1,135],$VX=[10,45],$VY=[2,75],$VZ=[1,137],$V_=[1,155],$V$=[28,37,45],$V01=[1,159],$V11=[29,36,110],$V21=[10,28,32,37,40,45,81,82,87,88,90,91,92,93,94,95,106],$V31=[10,28,32,37,40,45,81,82,83,84,86,87,88,90,91,92,93,94,95,106],$V41=[10,28,32,36,37,40,45,69,70,81,82,83,84,85,86,87,88,90,91,92,93,94,95,106,110],$V51=[2,5,18,19,25,26,32,33,38,51,52,53,55,56,60,61,62,64,67,68,75,82,89,97,98,99,100,101,102,103,105],$V61=[1,193],$V71=[1,194],$V81=[1,195],$V91=[1,196],$Va1=[2,5,18,19,25,32,33,38,51,52,53,55,56,59,60,61,62,64,67,68,75],$Vb1=[1,209],$Vc1=[10,29,36],$Vd1=[1,217],$Ve1=[1,221],$Vf1=[32,45],$Vg1=[10,28,32,37,40,45,87,88,90,91,92,93,94,95,106],$Vh1=[10,28,32,37,40,45,87,88,94,95,106],$Vi1=[1,231],$Vj1=[10,28,45],$Vk1=[2,73],$Vl1=[1,233],$Vm1=[2,76],$Vn1=[1,234],$Vo1=[10,28,29,30,32,36,45],$Vp1=[1,242],$Vq1=[1,244],$Vr1=[37,45],$Vs1=[1,256],$Vt1=[2,36],$Vu1=[1,258],$Vv1=[28,45],$Vw1=[1,280],$Vx1=[1,281],$Vy1=[1,301],$Vz1=[1,300],$VA1=[1,324],$VB1=[1,315],$VC1=[1,316],$VD1=[1,321],$VE1=[1,323],$VF1=[32,67,68],$VG1=[1,348],$VH1=[2,159],$VI1=[2,18,19,25,32,33,51,52,53,55,56,60,61,62,64,75],$VJ1=[1,379],$VK1=[28,30,36,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Imprimir":7,"DeclaracionVariable":8,"AsignacionVariable":9,";":10,"IfSt":11,"WhileSt":12,"DoWhileSt":13,"SwitchSt":14,"IncreDecre":15,"DefinicionTypes":16,"GraficarTs":17,"BREAK":18,"CONTINUE":19,"DeclaracionArreglos":20,"ForNormal":21,"ForOf":22,"ForIn":23,"Funcion":24,"ID":25,"(":26,"ListaExpr":27,")":28,"=":29,"{":30,"ListaValoresTipo":31,"}":32,"RETURN":33,"Expr":34,"AsigIndividual":35,"[":36,"]":37,"FUNCTION":38,"ListaParametros":39,":":40,"TiposFuncion":41,"StatementFuncion":42,"ElementoParametro":43,"ListaParametrosPrima":44,",":45,"ElementoDeclaracion":46,"Tipos":47,"ListaCorh":48,"TipoNormal":49,"TIPOVOID":50,"CONSOLELOG":51,"GRAFICAR_TS":52,"LET":53,"ListaDeclaraciones":54,"CONST":55,"IF":56,"Statement":57,"ElseSt":58,"ELSE":59,"WHILE":60,"DO":61,"FOR":62,"OpcAsignacion":63,"SWITCH":64,"ListaCasos":65,"Caso":66,"CASE":67,"DEFAULT":68,"++":69,"--":70,"ValorType":71,"TIPOSTRING":72,"TIPOBOOLEAN":73,"TIPONUMBER":74,"TYPE":75,"ListaDefiniciones":76,"DefinicionAtributo":77,"ListaDimensiones":78,"ValoresArreglo":79,"ValorArreglo":80,"+":81,"-":82,"*":83,"/":84,"**":85,"%":86,"||":87,"&&":88,"!":89,">=":90,"<=":91,">":92,"<":93,"==":94,"!=":95,"F":96,"DECIMAL":97,"NUMBER":98,"STRING":99,"STRING2":100,"STRING3":101,"TRUE":102,"FALSE":103,"NuevoAcceso":104,"NULL":105,"?":106,"Accesos":107,"Acceso":108,"FuncionArreglo":109,".":110,"POP":111,"PUSH":112,"LENGTH":113,"InstruccionesFuncion":114,"InstruccionFuncion":115,"InstruccionesFuncionPrima":116,"OF":117,"IN":118,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",18:"BREAK",19:"CONTINUE",25:"ID",26:"(",28:")",29:"=",30:"{",32:"}",33:"RETURN",36:"[",37:"]",38:"FUNCTION",40:":",45:",",50:"TIPOVOID",51:"CONSOLELOG",52:"GRAFICAR_TS",53:"LET",55:"CONST",56:"IF",59:"ELSE",60:"WHILE",61:"DO",62:"FOR",64:"SWITCH",67:"CASE",68:"DEFAULT",69:"++",70:"--",72:"TIPOSTRING",73:"TIPOBOOLEAN",74:"TIPONUMBER",75:"TYPE",81:"+",82:"-",83:"*",84:"/",85:"**",86:"%",87:"||",88:"&&",89:"!",90:">=",91:"<=",92:">",93:"<",94:"==",95:"!=",97:"DECIMAL",98:"NUMBER",99:"STRING",100:"STRING2",101:"STRING3",102:"TRUE",103:"FALSE",105:"NULL",106:"?",110:".",111:"POP",112:"PUSH",113:"LENGTH",117:"OF",118:"IN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,5],[6,4],[6,6],[6,3],[6,2],[6,4],[6,5],[6,2],[6,2],[24,8],[24,6],[24,7],[24,5],[39,2],[44,3],[44,0],[43,1],[43,4],[48,3],[48,2],[41,1],[41,1],[41,1],[41,2],[7,5],[17,3],[8,3],[8,3],[9,3],[11,6],[58,2],[58,2],[58,0],[12,5],[13,7],[21,8],[63,1],[63,1],[14,7],[65,2],[65,1],[66,4],[66,3],[66,4],[66,3],[15,2],[15,2],[57,3],[57,2],[54,3],[54,1],[46,5],[46,3],[46,3],[46,1],[46,3],[46,7],[46,5],[31,3],[31,1],[71,3],[71,5],[49,1],[49,1],[49,1],[16,6],[76,3],[76,1],[77,3],[77,3],[20,5],[20,5],[20,4],[20,1],[78,3],[78,6],[78,6],[79,3],[79,1],[80,3],[80,3],[27,3],[27,1],[47,1],[47,1],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,2],[34,2],[34,3],[34,3],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,1],[96,3],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,4],[96,3],[96,5],[104,1],[104,1],[104,2],[108,1],[107,3],[107,4],[107,5],[107,3],[107,5],[107,4],[109,3],[109,4],[109,1],[35,4],[35,4],[35,3],[35,3],[42,3],[42,2],[114,2],[116,2],[116,0],[115,1],[115,1],[115,2],[115,1],[115,1],[115,1],[115,1],[115,2],[115,2],[115,2],[115,2],[115,2],[115,2],[115,1],[115,1],[115,1],[115,6],[115,5],[115,4],[115,4],[115,3],[115,2],[115,2],[115,2],[22,8],[22,8],[23,8],[23,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 60:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 7: case 8: case 9: case 10: case 17: case 18: case 19: case 20: case 37: case 41: case 51: case 52: case 138: case 139: case 160: case 161: case 163: case 164: case 165: case 166: case 173: case 174: case 175:

        this.$=$$[$0];
    
break;
case 6: case 11: case 12: case 16: case 100: case 162: case 167: case 168: case 172:

        this.$=$$[$0-1];
    
break;
case 13: case 169:

        this.$ =$$[$0-1];
    
break;
case 14: case 170:

        this.$ =new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 15: case 171:

        this.$ =new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 21: case 177:

        this.$ =new Llamada($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 22: case 178:

        this.$ =new Llamada($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 23: case 176:

        this.$ =  new AsignacionTipo($$[$0-5], '', $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 24: case 180:

        this.$ = new Return($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 25: case 181:

        this.$ = new Return(new Literal(-1, _$[$0-1].first_line, _$[$0-1].first_column, 11),_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 26: case 179:

        var s = eval('$$');
        var indice = s.length-1;
        console.log("------------------------------------------------------------------>");
        console.log(s[indice-3]);
        s[indice-3].expresionNueva = $$[$0-1];
        this.$=$$[$0-3];
    
break;
case 27:

        var s = eval('$$');
        var indice = s.length-1;
        console.log("------------------------------------------------------------------>");
        console.log(s[indice-3]);
        s[indice-3].expresionNueva = null;
        this.$=$$[$0-4];
    
break;
case 28:

        error=new Error_(_$[$0-1].first_line, _$[$0-1].first_column, 'Sintactico','El caracter: " ' + yytext + ' ",  no se esperaba');
        errores.push(error);
    
break;
case 29:

        error=new Error_(_$[$0-1].first_line,_$[$0-1].first_column, 'Sintactico','El caracter: " ' + yytext + ' ",  no se esperaba');
        errores.push(error);
    
break;
case 30:

        //console.log("Soy el statement");
        //console.log($$[$0]);
        var s = eval('$$');
        var ind = s.length - 1;
        this.$ = new Funcion(s[ind - 6], s[ind -4 ], s[ind-1],s[ind], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 31:

        //console.log("Soy el statement");
        //console.log($$[$02]);
        var s = eval('$$');
        var ind = s.length - 1;
        this.$ = new Funcion(s[ind - 4], s[ind -2 ], Tipo.VOID,s[ind], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 32:

        //console.log("Soy el statement");
        //console.log($$[$01]);
        var s = eval('$$');
        var ind = s.length - 1;
        this.$ = new Funcion(s[ind - 5], [], s[ind-1],s[ind], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 33:

        //console.log("Soy el statement");
        //console.log($$[$03]);
        var s = eval('$$');
        var ind = s.length - 1;
        this.$ = new Funcion(s[ind - 3], [], Tipo.VOID, s[ind], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 34:

        //console.log("Que paso");
        var s = eval('$$');
        var indice = s.length - 1;
        if(s[indice]==undefined){
            this.$ = [s[indice-1]];
        }else{
            s[indice].unshift(s[indice-1]);
            this.$ = s[indice];
        }
    
break;
case 35:

        var s = eval('$$');
        var indice = s.length - 1;
        if(s[indice] != undefined){
            s[indice].unshift(s[indice-1]);
        }else{
            s[indice] = [s[indice-1]];
        }
        this.$= s[indice]; 
    
break;
case 38:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO_VALOR, $$[$0-3], Tipo.ARRAY, $$[$0-1], null);
    
break;
case 42:

        this.$=Tipo.VOID;
    
break;
case 43:

        this.$={tipo:Tipo.TYPE, idTipo:$$[$0]};
    
break;
case 44:

        this.$=Tipo.ARRAY;
    
break;
case 45:

        this.$ = new Imprimir($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    /* CONSOLELOG '(' Expr ')' ';'
    {
        this.$ = new Imprimir($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    }
    |*/
    
break;
case 46:

        this.$ = new GraficarTs(_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 47:

        this.$= new Declaracion('let', $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 48:

        this.$ = new Declaracion('const',$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 49:

        this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
        /*
        
    |ID '=' '{' ListaValoresTipo '}'
    {
        let nuevoE =  new ElementoDeclaracion(TipoDeclaracion.ID_TIPO_VALOR, $$[$0-2], Tipo.TYPE, '', $$[$01]);
        this.$ = AsignacionTipo($$[$0-2], '', nuevoE, this.linea, this.columna);
    }
        */
    
break;
case 50:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 53:

        this.$=null;    
    
break;
case 54:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 55:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 56:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 57: case 133:

        this.$ = $$[$0];
    
break;
case 58:

        this.$= $$[$0];
    
break;
case 59:

        this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 61: case 71: case 80: case 88: case 99: case 103:

        this.$=[$$[$0]];
    
break;
case 62: case 64:

        this.$ = new Caso($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 63: case 65:

        this.$ = new Caso(null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 66:
   
        this.$ = new IncreDecre('incre', new Acceso($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 67:

        this.$ = new IncreDecre('decre', new Acceso($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 68: case 155:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 69: case 156:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 70: case 79:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 72:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO_VALOR,$$[$0-4],$$[$0-2],'',$$[$0]);
    
break;
case 73: case 90:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO,$$[$0-2],$$[$0],'',null);
    
break;
case 74:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_VALOR,$$[$0-2],'',null,$$[$0]);
    
break;
case 75:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID,$$[$0], null, '',null);
    
break;
case 76:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO,$$[$0-2], Tipo.TYPE, $$[$0], null);
    
break;
case 77:

        this.$ =  new ElementoDeclaracion(TipoDeclaracion.ID_TIPO_VALOR, $$[$0-6], Tipo.TYPE, $$[$0-4], $$[$0-1]);
    
break;
case 78:

        this.$ =  new ElementoDeclaracion(TipoDeclaracion.ID_TIPO_VALOR, $$[$0-4], Tipo.TYPE, $$[$0-2], $$[$0]);
        /*
        new Literal('null', _$[$0-4].first_line, _$[$0-4].first_column,4)
        */
    
break;
case 81:

        this.$={id:$$[$0-2], valor:$$[$0]};
    
break;
case 82:

        this.$ = {id:$$[$0-4], valor:$$[$0-1]}
    
break;
case 83:

        this.$=Tipo.STRING;
    
break;
case 84:

        this.$=Tipo.BOOLEAN;
    
break;
case 85:

        this.$=Tipo.NUMBER;
    
break;
case 86:

        this.$ = new DeclaracionType($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 87: case 102:

        $$[$0-2].push($$[$0]);
        this.$=$$[$0-2];
    
break;
case 89:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO,$$[$0-2],Tipo.TYPE,$$[$0],null);
    
break;
case 91:

        this.$=new DeclaracionArreglo($$[$0-4], $$[$0-1], _$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 92:

        this.$=new DeclaracionArreglo($$[$0-4],$$[$0-1], _$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 93:

        this.$=new DeclaracionArreglo($$[$0-3],[],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 94:

        this.$=new DeclaracionArreglo($$[$0],[],_$[$0].first_line,_$[$0].first_column);
    
break;
case 95:
   
        var s = eval('$$');
        var indice = s.length-1;
        console.log(s[indice-2]);
        this.$=new Simbolo(new Arreglo([$$[$0-2]],s[indice -2].valor.tipo), s[indice - 2].id, Tipo.ARRAY, s[indice-2].tipoSimbolo,s[indice-2].valor.tipo.idTipo);
    
break;
case 96: case 97:

        this.$=new Simbolo(new Arreglo([], $$[$0-2]), $$[$0-4], Tipo.ARRAY, $$[$0-5] ,$$[$0-2].idTipo);
    
break;
case 98:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
        
    
break;
case 101:
   
        this.$ = $$[$0-1];
    
break;
case 104:

        this.$={tipo:$$[$0], idTipo:''};
    
break;
case 105:

        this.$ = {tipo:Tipo.TYPE, idTipo:$$[$0]};
    
break;
case 106:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.SUMA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 107:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.RESTA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 108:
 
        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.MULTIPLICACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 109:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 110:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.POTENCIA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 111:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.MODULO, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 112:

        this.$ = new Aritmetica($$[$0], $$[$0], OperacionAritmetica.NEGACION, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 113:

        this.$ = new Aritmetica($$[$0-1], $$[$0-1], OperacionAritmetica.INCREMENTO, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 114:

        this.$ = new Aritmetica($$[$0-1], $$[$0-1], OperacionAritmetica.DECREMENTO, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 115:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 116:
 
        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 117:
 
        this.$ = new Relacional($$[$0], $$[$0], OperacionRelacional.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 118:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.MAYORIGUALQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 119:
 
        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.MENORIGUALQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 120:

        
        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.MAYORQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 121:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.MENORQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 122:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.IGUALACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 123:
 
        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.DIFERENCIACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 124:

        
        this.$ = $$[$0];
    
break;
case 125:
 
        this.$ = $$[$0-1];
    
break;
case 126:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 127:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 128: case 129: case 130:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 131:

        this.$ = new Literal(true, _$[$0].first_line, _$[$0].first_column, 3);
        
    
break;
case 132:

        this.$ = new Literal(false, _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 134:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column,4);
    
break;
case 135:

        this.$ =new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 136:

        this.$ =new Llamada($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 137:

        this.$=new Ternario($$[$0-4],$$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 140:

        this.$ = new AccesoArreglo($$[$0-1],null,null,$$[$0].funcion,$$[$0].valor, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 141:

        this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 142:

        this.$ = new AccesoTipo($$[$0],'', $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 143:

        this.$ = new AccesoArreglo('',$$[$0-1],$$[$0-3],'',null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 144:

        this.$ = new AccesoArreglo('',$$[$0-2],$$[$0-4],$$[$0].funcion,$$[$0].valor, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 145:

        this.$ =  new AccesoTipo($$[$0-2], $$[$0], null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 146:

        this.$ = new AccesoArreglo($$[$0-4],$$[$0-2],null,$$[$0].funcion,$$[$0].valor, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 147:

        this.$ = new AccesoArreglo($$[$0-3],$$[$0-1],null,'',null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 148:

        this.$={funcion:$$[$0-2], valor:null};
    
break;
case 149:

        this.$={funcion:$$[$0-3], valor:$$[$0-1]};
    
break;
case 150:

        this.$={funcion:$$[$0], valor:null};
    
break;
case 151:

        this.$ = new AsignacionIndArreglo('',$$[$0-1],$$[$0-3],'',null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 152:

        this.$ = new AsignacionIndArreglo($$[$0-3],$$[$0-1],null,'',null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 153:

        this.$= new AsignacionIndTipo($$[$0],'',$$[$0-2],null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 154:

        this.$= new AsignacionIndTipo($$[$0-2],$$[$0],null,null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 157:

        //console.log("Que paso");
        var s = eval('$$');
        var indice = s.length - 1;
        if(s[indice]==undefined){
            this.$ = [s[indice-1]];
        }else{
            s[indice].unshift(s[indice-1]);
            this.$ = s[indice];
        }
        
    
break;
case 158:

        var s = eval('$$');
        var indice = s.length - 1;
        if(s[indice] != undefined){
            s[indice].unshift(s[indice-1]);
        }else{
            s[indice] = [s[indice-1]];
        }
        this.$= s[indice];  
    
break;
case 159:

    
break;
case 182:

        error=new Error_(_$[$0-1].first_line, _$[$0-1].first_column, 'Sintactico','El caracter: " ' + yytext + ' ",  no se esperaba(Una instruccion no pertenece a la funcion)');
        errores.push(error);
    
break;
case 183:

        error=new Error_(_$[$0-1].first_line,_$[$0-1].first_column, 'Sintactico','El caracter: " ' + yytext + ' ",  no se esperaba (Una instruccion no pertenece a la funcion)');
        errores.push(error);
    
break;
case 184: case 185:

        this.$ =  new ForOf($$[$0-4],$$[$0-2],$$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 186: case 187:

        this.$ =  new ForIn($$[$0-4],$$[$0-2],$$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:16,21:17,22:18,23:19,24:20,25:$V3,33:$V4,35:23,38:$V5,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,75:$Vf,78:34},{1:[3]},{2:$V0,5:[1,37],6:38,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:16,21:17,22:18,23:19,24:20,25:$V3,33:$V4,35:23,38:$V5,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,75:$Vf,78:34},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),{10:[1,39]},o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),{10:[1,40]},{10:[1,41]},{10:[1,42]},{10:[1,43]},{10:[1,44]},{10:[1,45]},o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),{26:[1,46],29:[1,47],36:$Vh,69:$Vi,70:$Vj,110:$Vk},{10:[1,53],25:$Vl,26:$Vm,34:52,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{29:[1,70],36:$Vx,110:$Vy},{10:[1,73],32:[1,74]},{26:[1,75]},{25:[1,77],46:78,54:76},{25:[1,80],46:78,54:79},{26:[1,81]},{26:[1,82]},{30:$Vz,57:83},{26:[1,85]},{25:[1,86]},{26:[1,87]},{10:[2,94],29:[1,88],36:[1,89]},{26:[1,90]},{25:[1,91]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,6]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),{25:$Vl,26:$Vm,27:92,28:[1,93],34:94,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,30:[1,95],34:96,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},o($VA,[2,66]),o($VA,[2,67]),{25:$Vl,26:$Vm,34:97,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:[1,98]},{10:[1,99],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},o($Vg,[2,25]),{25:$Vl,26:$Vm,34:117,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:118,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},o($VS,[2,124]),{25:$Vl,26:$Vm,34:119,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},o($VS,[2,126]),o($VS,[2,127]),o($VS,[2,128]),o($VS,[2,129]),o($VS,[2,130]),o($VS,[2,131]),o($VS,[2,132]),o($VS,[2,133]),o($VS,[2,134]),o($VS,[2,141],{109:121,26:[1,120],36:[1,123],110:[1,122],111:$VT,112:$VU,113:$VV}),o($VS,[2,138],{36:[1,128],110:[1,127]}),o($VS,[2,139]),{25:$Vl,26:$Vm,34:129,36:[1,130],82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:131,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:[1,132]},o($Vg,[2,28]),o($Vg,[2,29]),{25:$Vl,26:$Vm,27:133,34:94,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{10:[1,134],45:$VW},o($VX,$VY,{29:$VZ,40:[1,136]}),o($VX,[2,71]),{10:[1,138],45:$VW},o($VX,$VY,{29:$VZ,40:[1,139]}),{25:$Vl,26:$Vm,34:140,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:141,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{60:[1,142]},{2:$V0,4:143,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:16,21:17,22:18,23:19,24:20,25:$V3,32:[1,144],33:$V4,35:23,38:$V5,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,75:$Vf,78:34},{25:$Vl,26:$Vm,34:145,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{29:[1,146]},{28:[1,147]},{36:[1,148]},{37:[1,149]},{8:150,53:[1,151],55:[1,152]},{26:[1,153]},{28:[1,154],45:$V_},{10:[1,156]},o($V$,[2,103],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR}),{25:$V01,31:157,71:158},o($VA,[2,49],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR}),{37:[1,160],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},o($V11,[2,154]),o($Vg,[2,24]),{25:$Vl,26:$Vm,34:161,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:162,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:163,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:164,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:165,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:166,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},o($VS,[2,113]),o($VS,[2,114]),{25:$Vl,26:$Vm,34:167,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:168,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:169,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:170,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:171,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:172,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:173,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:174,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:175,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},o($V21,[2,112],{69:$VB,70:$VC,83:$VF,84:$VG,85:$VH,86:$VI}),o($V31,[2,117],{69:$VB,70:$VC,85:$VH}),{28:[1,176],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},{25:$Vl,26:$Vm,27:177,28:[1,178],34:94,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},o($VS,[2,140]),{25:[1,179]},{25:$Vl,26:$Vm,34:180,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{26:[1,181]},{26:[1,182]},o($V41,[2,150]),{25:[1,183]},{25:$Vl,26:$Vm,34:184,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{10:[1,185],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},{37:[1,186]},{37:[1,187],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},o($V11,[2,153]),{28:[1,188],45:$V_},o($V51,[2,47]),{25:[1,190],46:189},{25:$V61,47:191,49:192,72:$V71,73:$V81,74:$V91},{25:$Vl,26:$Vm,34:197,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},o($V51,[2,48]),{25:$V61,47:198,49:192,72:$V71,73:$V81,74:$V91},{28:[1,199],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},{28:[1,200],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},{26:[1,201]},{2:$V0,6:38,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:16,21:17,22:18,23:19,24:20,25:$V3,32:[1,202],33:$V4,35:23,38:$V5,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,75:$Vf,78:34},o($Va1,[2,69]),{28:[1,203],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},{30:[1,204]},{10:[2,46]},{25:$Vl,26:$Vm,27:206,34:94,36:$Vb1,37:[1,207],79:205,80:208,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},o($Vc1,[2,95]),{25:$Vl,26:$Vm,34:210,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:[1,211],46:78,54:76},{25:[1,212],46:78,54:79},{25:$Vd1,28:[1,214],39:213,43:215,46:216},{10:[1,218]},{25:$Vl,26:$Vm,34:219,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},o($Vg,[2,22]),{32:[1,220],45:$Ve1},o($Vf1,[2,80]),{40:[1,222]},o($V11,[2,152]),o($V21,[2,106],{69:$VB,70:$VC,83:$VF,84:$VG,85:$VH,86:$VI}),o($V21,[2,107],{69:$VB,70:$VC,83:$VF,84:$VG,85:$VH,86:$VI}),o($V31,[2,108],{69:$VB,70:$VC,85:$VH}),o($V31,[2,109],{69:$VB,70:$VC,85:$VH}),o($V31,[2,110],{69:$VB,70:$VC,85:$VH}),o($V31,[2,111],{69:$VB,70:$VC,85:$VH}),o([10,28,32,37,40,45,87,106],[2,115],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ}),o([10,28,32,37,40,45,87,88,106],[2,116],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ}),o($Vg1,[2,118],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI}),o($Vg1,[2,119],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI}),o($Vg1,[2,120],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI}),o($Vg1,[2,121],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI}),o($Vh1,[2,122],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,90:$VL,91:$VM,92:$VN,93:$VO}),o($Vh1,[2,123],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,90:$VL,91:$VM,92:$VN,93:$VO}),{40:[1,223],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},o($VS,[2,125]),{28:[1,224],45:$V_},o($VS,[2,136]),o($V41,[2,145]),{37:[1,225],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},{28:[1,226]},{25:$Vl,26:$Vm,34:227,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},o($V41,[2,142]),{37:[1,228],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},o($Vg,[2,26]),{10:[1,229]},o($V11,[2,151]),{10:[1,230]},o($VX,[2,70]),o($VX,$VY,{29:$VZ,40:$Vi1}),{36:[1,232]},o($Vj1,$Vk1,{29:$Vl1,36:[2,104]}),o($Vj1,$Vm1,{29:$Vn1,36:[2,105]}),o($Vo1,[2,83]),o($Vo1,[2,84]),o($Vo1,[2,85]),o($Vj1,[2,74],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR}),{36:[1,235]},{30:$Vz,57:236},{30:$Vz,57:237},{25:$Vl,26:$Vm,34:238,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},o($Va1,[2,68]),{30:[1,239]},{25:$Vp1,76:240,77:241},{37:[1,243],45:$Vq1},{37:[1,245],45:$V_},{10:[2,93]},o($Vr1,[2,99]),{25:$Vl,26:$Vm,27:246,34:94,36:$Vb1,79:247,80:208,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{10:[1,248],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},o($VX,$VY,{29:$VZ,40:$Vi1,117:[1,249],118:[1,250]}),o($VX,$VY,{29:$VZ,40:$Vi1,117:[1,251],118:[1,252]}),{28:[1,253]},{30:$Vs1,40:[1,254],42:255},{28:$Vt1,44:257,45:$Vu1},o($Vv1,[2,37]),o($Vv1,$VY,{29:$VZ,40:[1,259]}),o($Vg,[2,21]),o($V$,[2,102],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR}),{10:[1,260]},{25:$V01,71:261},{25:$Vl,26:$Vm,30:[1,263],34:262,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:264,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},o($VS,[2,135]),o($V41,[2,147],{109:265,111:$VT,112:$VU,113:$VV}),o($V41,[2,148]),{28:[1,266],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},o($V41,[2,143],{109:267,111:$VT,112:$VU,113:$VV}),o($Vg,[2,27]),o($Vg,[2,45]),{25:[1,269],49:268,72:$V71,73:$V81,74:$V91},{37:[1,270]},{25:$Vl,26:$Vm,34:271,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,30:[1,272],34:273,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{37:[1,274]},o($Vg,[2,53],{58:275,59:[1,276]}),o($Vg,[2,54]),{28:[1,277],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},{65:278,66:279,67:$Vw1,68:$Vx1},{32:[1,282],45:[1,283]},o($Vf1,[2,88]),{40:[1,284]},{10:[2,91]},{36:$Vb1,80:285},{10:[2,92]},{37:[1,286],45:$V_},{37:[1,287],45:$Vq1},{9:289,15:290,25:[1,291],63:288},{25:$Vl,26:$Vm,34:292,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:293,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:294,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:295,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{30:$Vs1,40:[1,296],42:297},{25:$Vy1,41:298,49:299,50:$Vz1,72:$V71,73:$V81,74:$V91},o($Vg,[2,33]),{2:$VA1,7:305,8:306,9:307,11:308,12:309,13:310,14:311,15:312,16:313,17:314,18:$VB1,19:$VC1,20:317,21:318,22:319,23:320,25:$VD1,32:[1,303],33:$VE1,35:322,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,75:$Vf,78:34,114:302,115:304},{28:[2,34]},{25:$Vd1,43:325,46:216},{25:$V61,47:326,49:192,72:$V71,73:$V81,74:$V91},o($Vg,[2,23]),o($Vf1,[2,79]),o($Vf1,[2,81],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR}),{25:$V01,31:327,71:158},o([10,28,32,37,40,45,106],[2,137],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ}),o($V41,[2,146]),o($V41,[2,149]),o($V41,[2,144]),o($VX,$Vk1,{29:$Vl1}),o($VX,$Vm1,{29:$Vn1}),o($Vc1,[2,96]),o($Vj1,[2,72],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR}),{25:$V01,31:328,71:158},o($Vj1,[2,78],{69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR}),o($Vc1,[2,97]),o($Vg,[2,50]),{11:330,30:$Vz,56:$Va,57:329},{10:[1,331]},{32:[1,332],66:333,67:$Vw1,68:$Vx1},o($VF1,[2,61]),{25:$Vl,26:$Vm,34:334,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{40:[1,335]},{10:[2,86]},{25:$Vp1,77:336},{25:[1,337],49:338,72:$V71,73:$V81,74:$V91},o($Vr1,[2,98]),o($Vr1,[2,100]),o($Vr1,[2,101]),{28:[1,339]},{28:[2,57]},{28:[2,58]},{29:[1,340],69:$Vi,70:$Vj},{28:[1,341],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},{28:[1,342],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},{28:[1,343],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},{28:[1,344],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},{25:$Vy1,41:345,49:299,50:$Vz1,72:$V71,73:$V81,74:$V91},o($Vg,[2,31]),{30:$Vs1,42:346},{30:[2,41],36:$VG1,48:347},{30:[2,42]},{30:[2,43]},{32:[1,349]},o($Vg,[2,156]),{2:$VA1,7:305,8:306,9:307,11:308,12:309,13:310,14:311,15:312,16:313,17:314,18:$VB1,19:$VC1,20:317,21:318,22:319,23:320,25:$VD1,32:$VH1,33:$VE1,35:322,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,75:$Vf,78:34,115:351,116:350},o($VI1,[2,160]),o($VI1,[2,161]),{10:[1,352]},o($VI1,[2,163]),o($VI1,[2,164]),o($VI1,[2,165]),o($VI1,[2,166]),{10:[1,353]},{10:[1,354]},{10:[1,355]},{10:[1,356]},{10:[1,357]},{10:[1,358]},o($VI1,[2,173]),o($VI1,[2,174]),o($VI1,[2,175]),{26:[1,360],29:[1,359],36:$Vh,69:$Vi,70:$Vj,110:$Vk},{29:[1,361],36:$Vx,110:$Vy},{10:[1,363],25:$Vl,26:$Vm,34:362,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{10:[1,364],32:[1,365]},{28:$Vt1,44:366,45:$Vu1},{36:$VG1,48:367},{32:[1,368],45:$Ve1},{32:[1,369],45:$Ve1},o($Vg,[2,51]),o($Vg,[2,52]),o($Vg,[2,55]),o($Vg,[2,59]),o($VF1,[2,60]),{40:[1,370],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},{2:$V0,4:372,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:16,21:17,22:18,23:19,24:20,25:$V3,30:$Vz,33:$V4,35:23,38:$V5,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:371,60:$Vb,61:$Vc,62:$Vd,64:$Ve,75:$Vf,78:34},o($Vf1,[2,87]),o($Vf1,[2,89]),o($Vf1,[2,90]),{30:$Vz,57:373},{25:$Vl,26:$Vm,34:96,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{30:$Vz,57:374},{30:$Vz,57:375},{30:$Vz,57:376},{30:$Vz,57:377},{30:$Vs1,42:378},o($Vg,[2,32]),{30:[2,44],36:$VJ1},{37:[1,380]},o($Vg,[2,155]),{32:[2,157]},{2:$VA1,7:305,8:306,9:307,11:308,12:309,13:310,14:311,15:312,16:313,17:314,18:$VB1,19:$VC1,20:317,21:318,22:319,23:320,25:$VD1,32:$VH1,33:$VE1,35:322,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,75:$Vf,78:34,115:351,116:381},o($VI1,[2,162]),o($VI1,[2,167]),o($VI1,[2,168]),o($VI1,[2,169]),o($VI1,[2,170]),o($VI1,[2,171]),o($VI1,[2,172]),{25:$Vl,26:$Vm,30:[1,382],34:96,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,27:383,28:[1,384],34:94,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{25:$Vl,26:$Vm,34:385,82:$Vn,89:$Vo,96:56,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:65,105:$Vw,107:68,108:69},{10:[1,386],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},o($VI1,[2,181]),o($VI1,[2,182]),o($VI1,[2,183]),{28:[2,35]},o($Vv1,[2,38],{36:$VJ1}),o($Vf1,[2,82]),o($Vj1,[2,77]),{2:$V0,4:388,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:16,21:17,22:18,23:19,24:20,25:$V3,30:$Vz,33:$V4,35:23,38:$V5,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,57:387,60:$Vb,61:$Vc,62:$Vd,64:$Ve,75:$Vf,78:34},o($VF1,[2,63]),o($VF1,[2,65],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:16,21:17,22:18,23:19,24:20,35:23,78:34,6:38,2:$V0,18:$V1,19:$V2,25:$V3,33:$V4,38:$V5,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,75:$Vf}),o($Vg,[2,56]),o($Vg,[2,184]),o($Vg,[2,186]),o($Vg,[2,185]),o($Vg,[2,187]),o($Vg,[2,30]),{37:[1,389]},o($VK1,[2,40]),{32:[2,158]},{25:$V01,31:390,71:158},{28:[1,391],45:$V_},{10:[1,392]},{10:[1,393],69:$VB,70:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,106:$VR},o($VI1,[2,180]),o($VF1,[2,62]),o($VF1,[2,64],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:16,21:17,22:18,23:19,24:20,35:23,78:34,6:38,2:$V0,18:$V1,19:$V2,25:$V3,33:$V4,38:$V5,51:$V6,52:$V7,53:$V8,55:$V9,56:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,75:$Vf}),o($VK1,[2,39]),{32:[1,394],45:$Ve1},{10:[1,395]},o($VI1,[2,178]),o($VI1,[2,179]),{10:[1,396]},o($VI1,[2,177]),o($VI1,[2,176])],
defaultActions: {37:[2,1],147:[2,46],207:[2,93],243:[2,91],245:[2,92],257:[2,34],282:[2,86],289:[2,57],290:[2,58],300:[2,42],301:[2,43],350:[2,157],366:[2,35],381:[2,158]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Aritmetica, OperacionAritmetica } = require('../Expresion/Aritmetica');
    const { Relacional, OperacionRelacional } = require('../Expresion/Relacional');
    const { Acceso } = require('../Expresion/Acceso');
    const { AccesoTipo } = require('../Expresion/AccesoTipo');
    const { Ternario } = require('../Expresion/Ternario');
    const { AccesoArreglo } = require('../Expresion/AccesoArreglo');
    const { Literal} = require('../Expresion/Literal');
    const { Imprimir } =require('../Instrucciones/Imprimir');
    const { GraficarTs } =require('../Instrucciones/GraficarTs');
    const { Break } =require('../Instrucciones/Break');
    const { Return } =require('../Instrucciones/Return');
    const { DeclaracionArreglo } =require('../Instrucciones/DeclaracionArreglo');
    const { Continue } =require('../Instrucciones/Continue');
    const { Switch } =require('../Instrucciones/Switch');
    const { If } = require('../Instrucciones/If');
    const { While } = require('../Instrucciones/While');
    const { Arreglo } = require('../Objetos/Arreglo');
    const { Simbolo } = require('../Simbolo/Simbolo');
    const { DoWhile } = require('../Instrucciones/DoWhile');
    const { For } = require('../Instrucciones/For');
    const { ForOf } = require('../Instrucciones/ForOf');
    const { ForIn } = require('../Instrucciones/ForIn');
    const { IncreDecre } = require('../Instrucciones/IncreDecre');
    const { Statement} = require('../Instrucciones/Statement');
    const { Asignacion} = require('../Instrucciones/Asignacion');
    const { AsignacionIndArreglo } = require('../Instrucciones/AsignacionIndArreglo');
    const { AsignacionIndTipo } = require('../Instrucciones/AsignacionIndTipo');
    const { AsignacionTipo } = require('../Instrucciones/AsignacionTipo');
    const { Tipo, cuadro_texto } =require("../Abstracto/Retorno");
    const { errores } =require('../Errores/Errores');
    const { Error_ } =require('../Errores/Error');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Funcion } = require('../Instrucciones/Funcion');
    const { Llamada } = require('../Instrucciones/Llamada');
    const { ElementoDeclaracion, TipoDeclaracion } = require('../Util/ElementoDeclaracion');
    const { Caso } = require('../Util/Caso');
    const { DeclaracionType } = require('../Instrucciones/DeclaracionType');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */ 
break;
case 1://console.log("imprime comentario "+yy_.yytext);
break;
case 2://console.log("imprime comentario Multilinea"+yy_.yytext);
break;
case 3:return 97
break;
case 4:return 98
break;
case 5:return 99
break;
case 6:return 100
break;
case 7:return 101
break;
case 8:return 85
break;
case 9:return 83
break;
case 10:return 84
break;
case 11:return 10
break;
case 12:return 45
break;
case 13:return 69
break;
case 14:return 70
break;
case 15:return 82
break;
case 16:return 81
break;
case 17:return '^'
break;
case 18:return 86
break;
case 19:return 91
break;
case 20:return 90
break;
case 21:return 93
break;
case 22:return 92
break;
case 23:return 94
break;
case 24:return 95
break;
case 25:return 87
break;
case 26:return 88
break;
case 27:return 89
break;
case 28:return 106
break;
case 29:return 29
break;
case 30:return 26
break;
case 31:return 28 
break;
case 32:return 30
break;
case 33:return 32
break;
case 34:return 36
break;
case 35:return 37
break;
case 36:return 40
break;
case 37:return 56
break;
case 38:return 59
break;
case 39:return 60
break;
case 40:return 102
break;
case 41:return 103
break;
case 42:return 51
break;
case 43:return 52
break;
case 44:return 61
break;
case 45:return 53
break;
case 46:return 55
break;
case 47:return 74
break;
case 48:return 72
break;
case 49:return 73
break;
case 50:return 64
break;
case 51:return 67
break;
case 52:return 68
break;
case 53:return 75
break;
case 54:return 105
break;
case 55:return 18
break;
case 56:return 19
break;
case 57:return 62
break;
case 58:return 117
break;
case 59:return 118
break;
case 60:return 38
break;
case 61:return "TIPOVOID"
break;
case 62:return "RETURN"  
break;
case 63:return 112
break;
case 64:return 111
break;
case 65:return 113
break;
case 66:return 110
break;
case 67:return 25;
break;
case 68:return 5
break;
case 69: 
    //cuadro_texto.errores_sintacticos_lexicos='Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column+'\n'; 
    error=new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico','El caracter: " ' + yy_.yytext + ' ",  no pertenece al lenguaje');
    errores.push(error);
    //console.log(error);

break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/([^\n])*([\n]|$))/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*")))/,/^(?:(('((\\([\'\"\\bfnrtv]))|([^\'\\]+))*')))/,/^(?:((`((\\([\'\"\\bfnrtv]))|([^`\\]+))*`)))/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:;)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\?)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:do\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:function\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:\.push\b)/,/^(?:\.pop\b)/,/^(?:\.length\b)/,/^(?:\.)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}